// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coder/coder/v2/tailnet (interfaces: Coordinator)
//
// Generated by this command:
//
//	mockgen -destination ./coordinatormock.go -package tailnettest github.com/coder/coder/v2/tailnet Coordinator
//

// Package tailnettest is a generated GoMock package.
package tailnettest

import (
	context "context"
	http "net/http"
	reflect "reflect"

	tailnet "github.com/coder/coder/v2/tailnet"
	proto "github.com/coder/coder/v2/tailnet/proto"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCoordinator is a mock of Coordinator interface.
type MockCoordinator struct {
	ctrl     *gomock.Controller
	recorder *MockCoordinatorMockRecorder
	isgomock struct{}
}

// MockCoordinatorMockRecorder is the mock recorder for MockCoordinator.
type MockCoordinatorMockRecorder struct {
	mock *MockCoordinator
}

// NewMockCoordinator creates a new mock instance.
func NewMockCoordinator(ctrl *gomock.Controller) *MockCoordinator {
	mock := &MockCoordinator{ctrl: ctrl}
	mock.recorder = &MockCoordinatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoordinator) EXPECT() *MockCoordinatorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCoordinator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCoordinatorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCoordinator)(nil).Close))
}

// Coordinate mocks base method.
func (m *MockCoordinator) Coordinate(ctx context.Context, id uuid.UUID, name string, a tailnet.CoordinateeAuth) (chan<- *proto.CoordinateRequest, <-chan *proto.CoordinateResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Coordinate", ctx, id, name, a)
	ret0, _ := ret[0].(chan<- *proto.CoordinateRequest)
	ret1, _ := ret[1].(<-chan *proto.CoordinateResponse)
	return ret0, ret1
}

// Coordinate indicates an expected call of Coordinate.
func (mr *MockCoordinatorMockRecorder) Coordinate(ctx, id, name, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Coordinate", reflect.TypeOf((*MockCoordinator)(nil).Coordinate), ctx, id, name, a)
}

// Node mocks base method.
func (m *MockCoordinator) Node(id uuid.UUID) *tailnet.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node", id)
	ret0, _ := ret[0].(*tailnet.Node)
	return ret0
}

// Node indicates an expected call of Node.
func (mr *MockCoordinatorMockRecorder) Node(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockCoordinator)(nil).Node), id)
}

// ServeHTTPDebug mocks base method.
func (m *MockCoordinator) ServeHTTPDebug(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTPDebug", w, r)
}

// ServeHTTPDebug indicates an expected call of ServeHTTPDebug.
func (mr *MockCoordinatorMockRecorder) ServeHTTPDebug(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTPDebug", reflect.TypeOf((*MockCoordinator)(nil).ServeHTTPDebug), w, r)
}
