// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coder/coder/v2/tailnet (interfaces: WorkspaceUpdatesProvider)
//
// Generated by this command:
//
//	mockgen -destination ./workspaceupdatesprovidermock.go -package tailnettest github.com/coder/coder/v2/tailnet WorkspaceUpdatesProvider
//

// Package tailnettest is a generated GoMock package.
package tailnettest

import (
	context "context"
	reflect "reflect"

	tailnet "github.com/coder/coder/v2/tailnet"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkspaceUpdatesProvider is a mock of WorkspaceUpdatesProvider interface.
type MockWorkspaceUpdatesProvider struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceUpdatesProviderMockRecorder
	isgomock struct{}
}

// MockWorkspaceUpdatesProviderMockRecorder is the mock recorder for MockWorkspaceUpdatesProvider.
type MockWorkspaceUpdatesProviderMockRecorder struct {
	mock *MockWorkspaceUpdatesProvider
}

// NewMockWorkspaceUpdatesProvider creates a new mock instance.
func NewMockWorkspaceUpdatesProvider(ctrl *gomock.Controller) *MockWorkspaceUpdatesProvider {
	mock := &MockWorkspaceUpdatesProvider{ctrl: ctrl}
	mock.recorder = &MockWorkspaceUpdatesProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceUpdatesProvider) EXPECT() *MockWorkspaceUpdatesProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWorkspaceUpdatesProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWorkspaceUpdatesProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWorkspaceUpdatesProvider)(nil).Close))
}

// Subscribe mocks base method.
func (m *MockWorkspaceUpdatesProvider) Subscribe(ctx context.Context, userID uuid.UUID) (tailnet.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, userID)
	ret0, _ := ret[0].(tailnet.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockWorkspaceUpdatesProviderMockRecorder) Subscribe(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockWorkspaceUpdatesProvider)(nil).Subscribe), ctx, userID)
}
