package usage

import (
	"context"

	"github.com/coder/coder/v2/coderd/database"
)

// Collector is a sink for usage events generated by the product.
type Collector interface {
	// CollectDiscreteUsageEvent writes a discrete usage event to the database
	// with the given database or transaction.
	CollectDiscreteUsageEvent(ctx context.Context, db database.Store, event DiscreteEvent) error
}

// AGPLCollector is a no-op implementation of Collector.
type AGPLCollector struct{}

var _ Collector = AGPLCollector{}

func NewAGPLCollector() Collector {
	return AGPLCollector{}
}

// CollectDiscreteUsageEvent is a no-op implementation of
// CollectDiscreteUsageEvent.
func (AGPLCollector) CollectDiscreteUsageEvent(_ context.Context, _ database.Store, _ DiscreteEvent) error {
	return nil
}
