// Code generated by rbacgen/main.go. DO NOT EDIT.
package rbac

var (
	// ResourceWildcard
	// Valid Actions
	//  - "*" needs [] :: Wildcard gives admin level access to all resources and all actions.
	ResourceWildcard = Object{
		Type: "*",
	}

	// ResourceApiKey
	// Valid Actions
	//  - "create" needs [owner] :: create an api key
	//  - "delete" needs [owner] :: delete an api key
	//  - "read" needs [owner] :: read api key details (secrets are not stored)
	ResourceApiKey = Object{
		Type: "api_key",
	}

	// ResourceAssignOrgRole
	// Valid Actions
	//  - "assign" needs [] :: ability to assign org scoped roles
	//  - "delete" needs [] :: ability to delete org scoped roles
	ResourceAssignOrgRole = Object{
		Type: "assign_org_role",
	}

	// ResourceAssignRole
	// Valid Actions
	//  - "assign" needs [] :: ability to assign roles
	//  - "delete" needs [] :: ability to delete roles
	//  - "read" needs [] :: view what roles are assignable
	ResourceAssignRole = Object{
		Type: "assign_role",
	}

	// ResourceAuditLog
	// Valid Actions
	//  - "read" needs [] :: read audit logs
	ResourceAuditLog = Object{
		Type: "audit_log",
	}

	// ResourceDebugInfo
	// Valid Actions
	//  - "use" needs [] :: access to debug routes
	ResourceDebugInfo = Object{
		Type: "debug_info",
	}

	// ResourceDeploymentConfig
	// Valid Actions
	//  - "read" needs [] :: read deployment config
	ResourceDeploymentConfig = Object{
		Type: "deployment_config",
	}

	// ResourceDeploymentStats
	// Valid Actions
	//  - "read" needs [] :: read deployment stats
	ResourceDeploymentStats = Object{
		Type: "deployment_stats",
	}

	// ResourceFile
	// Valid Actions
	//  - "create" needs [] :: create a file
	//  - "read" needs [] :: read files
	ResourceFile = Object{
		Type: "file",
	}

	// ResourceGroup
	// Valid Actions
	//  - "create" needs [org] :: create a group
	//  - "delete" needs [org] :: delete a group
	//  - "read" needs [org] :: read groups
	//  - "update" needs [org] :: update a group
	ResourceGroup = Object{
		Type: "group",
	}

	// ResourceLicense
	// Valid Actions
	//  - "create" needs [] :: create a license
	//  - "delete" needs [] :: delete license
	//  - "read" needs [] :: read licenses
	ResourceLicense = Object{
		Type: "license",
	}

	// ResourceOauth2App
	// Valid Actions
	//  - "create" needs [] :: make an OAuth2 app.
	//  - "delete" needs [] :: delete an OAuth2 app
	//  - "read" needs [] :: read OAuth2 apps
	//  - "update" needs [] :: update the properties of the OAuth2 app.
	ResourceOauth2App = Object{
		Type: "oauth2_app",
	}

	// ResourceOauth2AppCodeToken
	// Valid Actions
	//  - "create" needs [] ::
	//  - "delete" needs [] ::
	//  - "read" needs [] ::
	ResourceOauth2AppCodeToken = Object{
		Type: "oauth2_app_code_token",
	}

	// ResourceOauth2AppSecret
	// Valid Actions
	//  - "create" needs [] ::
	//  - "delete" needs [] ::
	//  - "read" needs [] ::
	//  - "update" needs [] ::
	ResourceOauth2AppSecret = Object{
		Type: "oauth2_app_secret",
	}

	// ResourceOrganization
	// Valid Actions
	//  - "create" needs [] :: create an organization
	//  - "delete" needs [] :: delete a organization
	//  - "read" needs [] :: read organizations
	ResourceOrganization = Object{
		Type: "organization",
	}

	// ResourceOrganizationMember
	// Valid Actions
	//  - "create" needs [org] :: create an organization member
	//  - "delete" needs [org] :: delete member
	//  - "read" needs [org] :: read member
	//  - "update" needs [org] :: update a organization member
	ResourceOrganizationMember = Object{
		Type: "organization_member",
	}

	// ResourceProvisionerDaemon
	// Valid Actions
	//  - "create" needs [org] :: create a provisioner daemon
	//  - "delete" needs [org] :: delete a provisioner daemon
	//  - "read" needs [org] :: read provisioner daemon
	//  - "update" needs [org] :: update a provisioner daemon
	ResourceProvisionerDaemon = Object{
		Type: "provisioner_daemon",
	}

	// ResourceReplicas
	// Valid Actions
	//  - "read" needs [] :: read replicas
	ResourceReplicas = Object{
		Type: "replicas",
	}

	// ResourceSystem
	// Valid Actions
	//  - "create" needs [] :: create system resources
	//  - "delete" needs [] :: delete system resources
	//  - "read" needs [] :: view system resources
	//  - "update" needs [] :: update system resources
	ResourceSystem = Object{
		Type: "system",
	}

	// ResourceTailnetCoordinator
	// Valid Actions
	//  - "create" needs [] ::
	//  - "delete" needs [] ::
	//  - "read" needs [] ::
	//  - "update" needs [] ::
	ResourceTailnetCoordinator = Object{
		Type: "tailnet_coordinator",
	}

	// ResourceTemplate
	// Valid Actions
	//  - "create" needs [org] :: create a template
	//  - "delete" needs [org,acl] :: delete a template
	//  - "read" needs [org,acl] :: read template
	//  - "update" needs [org,acl] :: update a template
	//  - "view_insights" needs [org,acl] :: view insights
	ResourceTemplate = Object{
		Type: "template",
	}

	// ResourceUser
	// Valid Actions
	//  - "create" needs [] :: create a new user
	//  - "delete" needs [] :: delete an existing user
	//  - "read" needs [] :: read user data
	//  - "read_personal" needs [owner] :: read personal user data like password
	//  - "update" needs [] :: update an existing user
	//  - "update_personal" needs [owner] :: update personal data
	ResourceUser = Object{
		Type: "user",
	}

	// ResourceWorkspace
	// Valid Actions
	//  - "application_connect" needs [owner,org,acl] :: connect to workspace apps via browser
	//  - "build" needs [owner,org,acl] :: allows starting, stopping, and updating a workspace
	//  - "build_parameters" needs [owner,org,acl] :: view workspace build parameters
	//  - "create" needs [owner,org] :: create a new workspace
	//  - "delete" needs [owner,org,acl] :: delete workspace
	//  - "read" needs [owner,org,acl] :: read workspace data to view on the UI
	//  - "ssh" needs [owner,org,acl] :: ssh into a given workspace
	//  - "update" needs [owner,org,acl] :: edit workspace settings (scheduling, permissions, parameters)
	ResourceWorkspace = Object{
		Type: "workspace",
	}

	// ResourceWorkspaceDormant
	// Valid Actions
	ResourceWorkspaceDormant = Object{
		Type: "workspace_dormant",
	}

	// ResourceWorkspaceProxy
	// Valid Actions
	//  - "create" needs [] :: create a workspace proxy
	//  - "delete" needs [] :: delete a workspace proxy
	//  - "read" needs [] :: read and use a workspace proxy
	//  - "update" needs [] :: update a workspace proxy
	ResourceWorkspaceProxy = Object{
		Type: "workspace_proxy",
	}
)

func AllResources() []Object {
	return []Object{
		ResourceWildcard,
		ResourceApiKey,
		ResourceAssignOrgRole,
		ResourceAssignRole,
		ResourceAuditLog,
		ResourceDebugInfo,
		ResourceDeploymentConfig,
		ResourceDeploymentStats,
		ResourceFile,
		ResourceGroup,
		ResourceLicense,
		ResourceOauth2App,
		ResourceOauth2AppCodeToken,
		ResourceOauth2AppSecret,
		ResourceOrganization,
		ResourceOrganizationMember,
		ResourceProvisionerDaemon,
		ResourceReplicas,
		ResourceSystem,
		ResourceTailnetCoordinator,
		ResourceTemplate,
		ResourceUser,
		ResourceWorkspace,
		ResourceWorkspaceDormant,
		ResourceWorkspaceProxy,
	}
}
