// Code generated by rbacgen/main.go. DO NOT EDIT.
package rbac

import "github.com/coder/coder/v2/coderd/rbac/policy"

// Objecter returns the RBAC object for itself.
type Objecter interface {
	RBACObject() Object
}

var (
	// ResourceWildcard
	// Valid Actions
	ResourceWildcard = WildcardObject{
		Object: Object{
			Type: "*",
		},
	}

	// ResourceApiKey
	// Valid Actions
	//  - "create" needs [owner] :: create an api key
	//  - "delete" needs [owner] :: delete an api key
	//  - "read" needs [owner] :: read api key details (secrets are not stored)
	ResourceApiKey = ApiKeyObject{
		Object: Object{
			Type: "api_key",
		},
	}

	// ResourceAssignOrgRole
	// Valid Actions
	//  - "assign" needs [] :: ability to assign org scoped roles
	//  - "delete" needs [] :: ability to delete org scoped roles
	ResourceAssignOrgRole = AssignOrgRoleObject{
		Object: Object{
			Type: "assign_org_role",
		},
	}

	// ResourceAssignRole
	// Valid Actions
	//  - "assign" needs [] :: ability to assign roles
	//  - "delete" needs [] :: ability to delete roles
	//  - "read" needs [] :: view what roles are assignable
	ResourceAssignRole = AssignRoleObject{
		Object: Object{
			Type: "assign_role",
		},
	}

	// ResourceAuditLog
	// Valid Actions
	//  - "read" needs [] :: read audit logs
	ResourceAuditLog = AuditLogObject{
		Object: Object{
			Type: "audit_log",
		},
	}

	// ResourceDebugInfo
	// Valid Actions
	//  - "use" needs [] :: access to debug routes
	ResourceDebugInfo = DebugInfoObject{
		Object: Object{
			Type: "debug_info",
		},
	}

	// ResourceDeploymentConfig
	// Valid Actions
	//  - "read" needs [] :: read deployment config
	ResourceDeploymentConfig = DeploymentConfigObject{
		Object: Object{
			Type: "deployment_config",
		},
	}

	// ResourceDeploymentStats
	// Valid Actions
	//  - "read" needs [] :: read deployment stats
	ResourceDeploymentStats = DeploymentStatsObject{
		Object: Object{
			Type: "deployment_stats",
		},
	}

	// ResourceFile
	// Valid Actions
	//  - "create" needs [] :: create a file
	//  - "read" needs [] :: read files
	ResourceFile = FileObject{
		Object: Object{
			Type: "file",
		},
	}

	// ResourceGroup
	// Valid Actions
	//  - "create" needs [org] :: create a group
	//  - "delete" needs [org] :: delete a group
	//  - "read" needs [org] :: read groups
	//  - "update" needs [org] :: update a group
	ResourceGroup = GroupObject{
		Object: Object{
			Type: "group",
		},
	}

	// ResourceLicense
	// Valid Actions
	//  - "create" needs [] :: create a license
	//  - "delete" needs [] :: delete license
	//  - "read" needs [] :: read licenses
	ResourceLicense = LicenseObject{
		Object: Object{
			Type: "license",
		},
	}

	// ResourceOauth2App
	// Valid Actions
	//  - "create" needs [] :: make an OAuth2 app.
	//  - "delete" needs [] :: delete an OAuth2 app
	//  - "read" needs [] :: read OAuth2 apps
	//  - "update" needs [] :: update the properties of the OAuth2 app.
	ResourceOauth2App = Oauth2AppObject{
		Object: Object{
			Type: "oauth2_app",
		},
	}

	// ResourceOauth2AppCodeToken
	// Valid Actions
	//  - "create" needs [] ::
	//  - "delete" needs [] ::
	//  - "read" needs [] ::
	ResourceOauth2AppCodeToken = Oauth2AppCodeTokenObject{
		Object: Object{
			Type: "oauth2_app_code_token",
		},
	}

	// ResourceOauth2AppSecret
	// Valid Actions
	//  - "create" needs [] ::
	//  - "delete" needs [] ::
	//  - "read" needs [] ::
	//  - "update" needs [] ::
	ResourceOauth2AppSecret = Oauth2AppSecretObject{
		Object: Object{
			Type: "oauth2_app_secret",
		},
	}

	// ResourceOrganization
	// Valid Actions
	//  - "create" needs [] :: create an organization
	//  - "delete" needs [] :: delete a organization
	//  - "read" needs [] :: read organizations
	ResourceOrganization = OrganizationObject{
		Object: Object{
			Type: "organization",
		},
	}

	// ResourceOrganizationMember
	// Valid Actions
	//  - "create" needs [org] :: create an organization member
	//  - "delete" needs [org] :: delete member
	//  - "read" needs [org] :: read member
	//  - "update" needs [org] :: update a organization member
	ResourceOrganizationMember = OrganizationMemberObject{
		Object: Object{
			Type: "organization_member",
		},
	}

	// ResourceProvisionerDaemon
	// Valid Actions
	//  - "create" needs [org] :: create a provisioner daemon
	//  - "delete" needs [org] :: delete a provisioner daemon
	//  - "read" needs [org] :: read provisioner daemon
	//  - "update" needs [org] :: update a provisioner daemon
	ResourceProvisionerDaemon = ProvisionerDaemonObject{
		Object: Object{
			Type: "provisioner_daemon",
		},
	}

	// ResourceReplicas
	// Valid Actions
	//  - "read" needs [] :: read replicas
	ResourceReplicas = ReplicasObject{
		Object: Object{
			Type: "replicas",
		},
	}

	// ResourceSystem
	// Valid Actions
	//  - "create" needs [] :: create system resources
	//  - "delete" needs [] :: delete system resources
	//  - "read" needs [] :: view system resources
	//  - "update" needs [] :: update system resources
	ResourceSystem = SystemObject{
		Object: Object{
			Type: "system",
		},
	}

	// ResourceTailnetCoordinator
	// Valid Actions
	//  - "create" needs [] ::
	//  - "delete" needs [] ::
	//  - "read" needs [] ::
	//  - "update" needs [] ::
	ResourceTailnetCoordinator = TailnetCoordinatorObject{
		Object: Object{
			Type: "tailnet_coordinator",
		},
	}

	// ResourceTemplate
	// Valid Actions
	//  - "create" needs [org] :: create a template
	//  - "delete" needs [org,acl] :: delete a template
	//  - "read" needs [org,acl] :: read template
	//  - "update" needs [org,acl] :: update a template
	//  - "view_insights" needs [org,acl] :: view insights
	ResourceTemplate = TemplateObject{
		Object: Object{
			Type: "template",
		},
	}

	// ResourceUser
	// Valid Actions
	//  - "create" needs [] :: create a new user
	//  - "delete" needs [] :: delete an existing user
	//  - "read" needs [] :: read user data
	//  - "read_personal" needs [owner] :: read personal user data like password
	//  - "update" needs [] :: update an existing user
	//  - "update_personal" needs [owner] :: update personal data
	ResourceUser = UserObject{
		Object: Object{
			Type: "user",
		},
	}

	// ResourceWorkspace
	// Valid Actions
	//  - "application_connect" needs [owner,org,acl] :: connect to workspace apps via browser
	//  - "build" needs [owner,org,acl] :: allows starting, stopping, and updating a workspace
	//  - "build_parameters" needs [owner,org,acl] :: view workspace build parameters
	//  - "create" needs [owner,org] :: create a new workspace
	//  - "delete" needs [owner,org,acl] :: delete workspace
	//  - "read" needs [owner,org,acl] :: read workspace data to view on the UI
	//  - "ssh" needs [owner,org,acl] :: ssh into a given workspace
	//  - "update" needs [owner,org,acl] :: edit workspace settings (scheduling, permissions, parameters)
	ResourceWorkspace = WorkspaceObject{
		Object: Object{
			Type: "workspace",
		},
	}

	// ResourceWorkspaceDormant
	// Valid Actions
	ResourceWorkspaceDormant = WorkspaceDormantObject{
		Object: Object{
			Type: "workspace_dormant",
		},
	}

	// ResourceWorkspaceProxy
	// Valid Actions
	//  - "create" needs [] :: create a workspace proxy
	//  - "delete" needs [] :: delete a workspace proxy
	//  - "read" needs [] :: read and use a workspace proxy
	//  - "update" needs [] :: update a workspace proxy
	ResourceWorkspaceProxy = WorkspaceProxyObject{
		Object: Object{
			Type: "workspace_proxy",
		},
	}
)

func AllResources() []Objecter {
	return []Objecter{
		ResourceWildcard,
		ResourceApiKey,
		ResourceAssignOrgRole,
		ResourceAssignRole,
		ResourceAuditLog,
		ResourceDebugInfo,
		ResourceDeploymentConfig,
		ResourceDeploymentStats,
		ResourceFile,
		ResourceGroup,
		ResourceLicense,
		ResourceOauth2App,
		ResourceOauth2AppCodeToken,
		ResourceOauth2AppSecret,
		ResourceOrganization,
		ResourceOrganizationMember,
		ResourceProvisionerDaemon,
		ResourceReplicas,
		ResourceSystem,
		ResourceTailnetCoordinator,
		ResourceTemplate,
		ResourceUser,
		ResourceWorkspace,
		ResourceWorkspaceDormant,
		ResourceWorkspaceProxy,
	}
}

type WildcardObject struct{ Object }

type ApiKeyObject struct{ Object }

func (ApiKeyObject) ActionCreate() policy.Action { return policy.ActionCreate }
func (ApiKeyObject) ActionDelete() policy.Action { return policy.ActionDelete }
func (ApiKeyObject) ActionRead() policy.Action   { return policy.ActionRead }

type AssignOrgRoleObject struct{ Object }

func (AssignOrgRoleObject) ActionAssign() policy.Action { return policy.ActionAssign }
func (AssignOrgRoleObject) ActionDelete() policy.Action { return policy.ActionDelete }

type AssignRoleObject struct{ Object }

func (AssignRoleObject) ActionAssign() policy.Action { return policy.ActionAssign }
func (AssignRoleObject) ActionDelete() policy.Action { return policy.ActionDelete }
func (AssignRoleObject) ActionRead() policy.Action   { return policy.ActionRead }

type AuditLogObject struct{ Object }

func (AuditLogObject) ActionRead() policy.Action { return policy.ActionRead }

type DebugInfoObject struct{ Object }

func (DebugInfoObject) ActionUse() policy.Action { return policy.ActionUse }

type DeploymentConfigObject struct{ Object }

func (DeploymentConfigObject) ActionRead() policy.Action { return policy.ActionRead }

type DeploymentStatsObject struct{ Object }

func (DeploymentStatsObject) ActionRead() policy.Action { return policy.ActionRead }

type FileObject struct{ Object }

func (FileObject) ActionCreate() policy.Action { return policy.ActionCreate }
func (FileObject) ActionRead() policy.Action   { return policy.ActionRead }

type GroupObject struct{ Object }

func (GroupObject) ActionCreate() policy.Action { return policy.ActionCreate }
func (GroupObject) ActionDelete() policy.Action { return policy.ActionDelete }
func (GroupObject) ActionRead() policy.Action   { return policy.ActionRead }
func (GroupObject) ActionUpdate() policy.Action { return policy.ActionUpdate }

type LicenseObject struct{ Object }

func (LicenseObject) ActionCreate() policy.Action { return policy.ActionCreate }
func (LicenseObject) ActionDelete() policy.Action { return policy.ActionDelete }
func (LicenseObject) ActionRead() policy.Action   { return policy.ActionRead }

type Oauth2AppObject struct{ Object }

func (Oauth2AppObject) ActionCreate() policy.Action { return policy.ActionCreate }
func (Oauth2AppObject) ActionDelete() policy.Action { return policy.ActionDelete }
func (Oauth2AppObject) ActionRead() policy.Action   { return policy.ActionRead }
func (Oauth2AppObject) ActionUpdate() policy.Action { return policy.ActionUpdate }

type Oauth2AppCodeTokenObject struct{ Object }

func (Oauth2AppCodeTokenObject) ActionCreate() policy.Action { return policy.ActionCreate }
func (Oauth2AppCodeTokenObject) ActionDelete() policy.Action { return policy.ActionDelete }
func (Oauth2AppCodeTokenObject) ActionRead() policy.Action   { return policy.ActionRead }

type Oauth2AppSecretObject struct{ Object }

func (Oauth2AppSecretObject) ActionCreate() policy.Action { return policy.ActionCreate }
func (Oauth2AppSecretObject) ActionDelete() policy.Action { return policy.ActionDelete }
func (Oauth2AppSecretObject) ActionRead() policy.Action   { return policy.ActionRead }
func (Oauth2AppSecretObject) ActionUpdate() policy.Action { return policy.ActionUpdate }

type OrganizationObject struct{ Object }

func (OrganizationObject) ActionCreate() policy.Action { return policy.ActionCreate }
func (OrganizationObject) ActionDelete() policy.Action { return policy.ActionDelete }
func (OrganizationObject) ActionRead() policy.Action   { return policy.ActionRead }

type OrganizationMemberObject struct{ Object }

func (OrganizationMemberObject) ActionCreate() policy.Action { return policy.ActionCreate }
func (OrganizationMemberObject) ActionDelete() policy.Action { return policy.ActionDelete }
func (OrganizationMemberObject) ActionRead() policy.Action   { return policy.ActionRead }
func (OrganizationMemberObject) ActionUpdate() policy.Action { return policy.ActionUpdate }

type ProvisionerDaemonObject struct{ Object }

func (ProvisionerDaemonObject) ActionCreate() policy.Action { return policy.ActionCreate }
func (ProvisionerDaemonObject) ActionDelete() policy.Action { return policy.ActionDelete }
func (ProvisionerDaemonObject) ActionRead() policy.Action   { return policy.ActionRead }
func (ProvisionerDaemonObject) ActionUpdate() policy.Action { return policy.ActionUpdate }

type ReplicasObject struct{ Object }

func (ReplicasObject) ActionRead() policy.Action { return policy.ActionRead }

type SystemObject struct{ Object }

func (SystemObject) ActionCreate() policy.Action { return policy.ActionCreate }
func (SystemObject) ActionDelete() policy.Action { return policy.ActionDelete }
func (SystemObject) ActionRead() policy.Action   { return policy.ActionRead }
func (SystemObject) ActionUpdate() policy.Action { return policy.ActionUpdate }

type TailnetCoordinatorObject struct{ Object }

func (TailnetCoordinatorObject) ActionCreate() policy.Action { return policy.ActionCreate }
func (TailnetCoordinatorObject) ActionDelete() policy.Action { return policy.ActionDelete }
func (TailnetCoordinatorObject) ActionRead() policy.Action   { return policy.ActionRead }
func (TailnetCoordinatorObject) ActionUpdate() policy.Action { return policy.ActionUpdate }

type TemplateObject struct{ Object }

func (TemplateObject) ActionCreate() policy.Action       { return policy.ActionCreate }
func (TemplateObject) ActionDelete() policy.Action       { return policy.ActionDelete }
func (TemplateObject) ActionRead() policy.Action         { return policy.ActionRead }
func (TemplateObject) ActionUpdate() policy.Action       { return policy.ActionUpdate }
func (TemplateObject) ActionViewInsights() policy.Action { return policy.ActionViewInsights }

type UserObject struct{ Object }

func (UserObject) ActionCreate() policy.Action         { return policy.ActionCreate }
func (UserObject) ActionDelete() policy.Action         { return policy.ActionDelete }
func (UserObject) ActionRead() policy.Action           { return policy.ActionRead }
func (UserObject) ActionReadPersonal() policy.Action   { return policy.ActionReadPersonal }
func (UserObject) ActionUpdate() policy.Action         { return policy.ActionUpdate }
func (UserObject) ActionUpdatePersonal() policy.Action { return policy.ActionUpdatePersonal }

type WorkspaceObject struct{ Object }

func (WorkspaceObject) ActionApplicationConnect() policy.Action {
	return policy.ActionApplicationConnect
}
func (WorkspaceObject) ActionWorkspaceBuild() policy.Action { return policy.ActionWorkspaceBuild }
func (WorkspaceObject) ActionViewWorkspaceBuildParams() policy.Action {
	return policy.ActionViewWorkspaceBuildParams
}
func (WorkspaceObject) ActionCreate() policy.Action { return policy.ActionCreate }
func (WorkspaceObject) ActionDelete() policy.Action { return policy.ActionDelete }
func (WorkspaceObject) ActionRead() policy.Action   { return policy.ActionRead }
func (WorkspaceObject) ActionSSH() policy.Action    { return policy.ActionSSH }
func (WorkspaceObject) ActionUpdate() policy.Action { return policy.ActionUpdate }

type WorkspaceDormantObject struct{ Object }

type WorkspaceProxyObject struct{ Object }

func (WorkspaceProxyObject) ActionCreate() policy.Action { return policy.ActionCreate }
func (WorkspaceProxyObject) ActionDelete() policy.Action { return policy.ActionDelete }
func (WorkspaceProxyObject) ActionRead() policy.Action   { return policy.ActionRead }
func (WorkspaceProxyObject) ActionUpdate() policy.Action { return policy.ActionUpdate }
