// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coder/coder/v2/coderd/cryptokeys (interfaces: Keycache)
//
// Generated by this command:
//
//	mockgen -destination keycachemock.go -package cryptokeys . Keycache
//

// Package cryptokeys is a generated GoMock package.
package cryptokeys

import (
	context "context"
	reflect "reflect"

	codersdk "github.com/coder/coder/v2/codersdk"
	gomock "go.uber.org/mock/gomock"
)

// MockKeycache is a mock of Keycache interface.
type MockKeycache struct {
	ctrl     *gomock.Controller
	recorder *MockKeycacheMockRecorder
}

// MockKeycacheMockRecorder is the mock recorder for MockKeycache.
type MockKeycacheMockRecorder struct {
	mock *MockKeycache
}

// NewMockKeycache creates a new mock instance.
func NewMockKeycache(ctrl *gomock.Controller) *MockKeycache {
	mock := &MockKeycache{ctrl: ctrl}
	mock.recorder = &MockKeycacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeycache) EXPECT() *MockKeycacheMockRecorder {
	return m.recorder
}

// Signing mocks base method.
func (m *MockKeycache) Signing(arg0 context.Context) (codersdk.CryptoKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signing", arg0)
	ret0, _ := ret[0].(codersdk.CryptoKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signing indicates an expected call of Signing.
func (mr *MockKeycacheMockRecorder) Signing(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signing", reflect.TypeOf((*MockKeycache)(nil).Signing), arg0)
}

// Verifying mocks base method.
func (m *MockKeycache) Verifying(arg0 context.Context, arg1 int32) (codersdk.CryptoKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verifying", arg0, arg1)
	ret0, _ := ret[0].(codersdk.CryptoKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verifying indicates an expected call of Verifying.
func (mr *MockKeycacheMockRecorder) Verifying(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verifying", reflect.TypeOf((*MockKeycache)(nil).Verifying), arg0, arg1)
}
