// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: oauth2.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
	"github.com/sqlc-dev/pqtype"
)

const deleteOAuth2ProviderAppByClientID = `-- name: DeleteOAuth2ProviderAppByClientID :exec
DELETE FROM oauth2_provider_apps WHERE id = $1
`

func (q *Queries) DeleteOAuth2ProviderAppByClientID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOAuth2ProviderAppByClientID, id)
	return err
}

const deleteOAuth2ProviderAppByID = `-- name: DeleteOAuth2ProviderAppByID :exec
DELETE FROM oauth2_provider_apps WHERE id = $1
`

func (q *Queries) DeleteOAuth2ProviderAppByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOAuth2ProviderAppByID, id)
	return err
}

const deleteOAuth2ProviderAppCodeByID = `-- name: DeleteOAuth2ProviderAppCodeByID :exec
DELETE FROM oauth2_provider_app_codes WHERE id = $1
`

func (q *Queries) DeleteOAuth2ProviderAppCodeByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOAuth2ProviderAppCodeByID, id)
	return err
}

const deleteOAuth2ProviderAppCodesByAppAndUserID = `-- name: DeleteOAuth2ProviderAppCodesByAppAndUserID :exec
DELETE FROM oauth2_provider_app_codes WHERE app_id = $1 AND user_id = $2
`

type DeleteOAuth2ProviderAppCodesByAppAndUserIDParams struct {
	AppID  uuid.UUID `db:"app_id" json:"app_id"`
	UserID uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) DeleteOAuth2ProviderAppCodesByAppAndUserID(ctx context.Context, arg DeleteOAuth2ProviderAppCodesByAppAndUserIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteOAuth2ProviderAppCodesByAppAndUserID, arg.AppID, arg.UserID)
	return err
}

const deleteOAuth2ProviderAppSecretByID = `-- name: DeleteOAuth2ProviderAppSecretByID :exec
DELETE FROM oauth2_provider_app_secrets WHERE id = $1
`

func (q *Queries) DeleteOAuth2ProviderAppSecretByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOAuth2ProviderAppSecretByID, id)
	return err
}

const deleteOAuth2ProviderAppTokensByAppAndUserID = `-- name: DeleteOAuth2ProviderAppTokensByAppAndUserID :exec
DELETE FROM
  oauth2_provider_app_tokens
USING
  oauth2_provider_app_secrets
WHERE
  oauth2_provider_app_secrets.id = oauth2_provider_app_tokens.app_secret_id
  AND oauth2_provider_app_secrets.app_id = $1
  AND oauth2_provider_app_tokens.user_id = $2
`

type DeleteOAuth2ProviderAppTokensByAppAndUserIDParams struct {
	AppID  uuid.UUID `db:"app_id" json:"app_id"`
	UserID uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) DeleteOAuth2ProviderAppTokensByAppAndUserID(ctx context.Context, arg DeleteOAuth2ProviderAppTokensByAppAndUserIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteOAuth2ProviderAppTokensByAppAndUserID, arg.AppID, arg.UserID)
	return err
}

const getOAuth2ProviderAppByClientID = `-- name: GetOAuth2ProviderAppByClientID :one

SELECT id, created_at, updated_at, name, icon, callback_url, redirect_uris, client_type, dynamically_registered, client_id_issued_at, client_secret_expires_at, grant_types, response_types, token_endpoint_auth_method, scope, contacts, client_uri, logo_uri, tos_uri, policy_uri, jwks_uri, jwks, software_id, software_version, registration_access_token, registration_client_uri FROM oauth2_provider_apps WHERE id = $1
`

// RFC 7591/7592 Dynamic Client Registration queries
func (q *Queries) GetOAuth2ProviderAppByClientID(ctx context.Context, id uuid.UUID) (OAuth2ProviderApp, error) {
	row := q.db.QueryRowContext(ctx, getOAuth2ProviderAppByClientID, id)
	var i OAuth2ProviderApp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Icon,
		&i.CallbackURL,
		pq.Array(&i.RedirectUris),
		&i.ClientType,
		&i.DynamicallyRegistered,
		&i.ClientIDIssuedAt,
		&i.ClientSecretExpiresAt,
		pq.Array(&i.GrantTypes),
		pq.Array(&i.ResponseTypes),
		&i.TokenEndpointAuthMethod,
		&i.Scope,
		pq.Array(&i.Contacts),
		&i.ClientUri,
		&i.LogoUri,
		&i.TosUri,
		&i.PolicyUri,
		&i.JwksUri,
		&i.Jwks,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.RegistrationAccessToken,
		&i.RegistrationClientUri,
	)
	return i, err
}

const getOAuth2ProviderAppByID = `-- name: GetOAuth2ProviderAppByID :one
SELECT id, created_at, updated_at, name, icon, callback_url, redirect_uris, client_type, dynamically_registered, client_id_issued_at, client_secret_expires_at, grant_types, response_types, token_endpoint_auth_method, scope, contacts, client_uri, logo_uri, tos_uri, policy_uri, jwks_uri, jwks, software_id, software_version, registration_access_token, registration_client_uri FROM oauth2_provider_apps WHERE id = $1
`

func (q *Queries) GetOAuth2ProviderAppByID(ctx context.Context, id uuid.UUID) (OAuth2ProviderApp, error) {
	row := q.db.QueryRowContext(ctx, getOAuth2ProviderAppByID, id)
	var i OAuth2ProviderApp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Icon,
		&i.CallbackURL,
		pq.Array(&i.RedirectUris),
		&i.ClientType,
		&i.DynamicallyRegistered,
		&i.ClientIDIssuedAt,
		&i.ClientSecretExpiresAt,
		pq.Array(&i.GrantTypes),
		pq.Array(&i.ResponseTypes),
		&i.TokenEndpointAuthMethod,
		&i.Scope,
		pq.Array(&i.Contacts),
		&i.ClientUri,
		&i.LogoUri,
		&i.TosUri,
		&i.PolicyUri,
		&i.JwksUri,
		&i.Jwks,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.RegistrationAccessToken,
		&i.RegistrationClientUri,
	)
	return i, err
}

const getOAuth2ProviderAppByRegistrationToken = `-- name: GetOAuth2ProviderAppByRegistrationToken :one
SELECT id, created_at, updated_at, name, icon, callback_url, redirect_uris, client_type, dynamically_registered, client_id_issued_at, client_secret_expires_at, grant_types, response_types, token_endpoint_auth_method, scope, contacts, client_uri, logo_uri, tos_uri, policy_uri, jwks_uri, jwks, software_id, software_version, registration_access_token, registration_client_uri FROM oauth2_provider_apps WHERE registration_access_token = $1
`

func (q *Queries) GetOAuth2ProviderAppByRegistrationToken(ctx context.Context, registrationAccessToken sql.NullString) (OAuth2ProviderApp, error) {
	row := q.db.QueryRowContext(ctx, getOAuth2ProviderAppByRegistrationToken, registrationAccessToken)
	var i OAuth2ProviderApp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Icon,
		&i.CallbackURL,
		pq.Array(&i.RedirectUris),
		&i.ClientType,
		&i.DynamicallyRegistered,
		&i.ClientIDIssuedAt,
		&i.ClientSecretExpiresAt,
		pq.Array(&i.GrantTypes),
		pq.Array(&i.ResponseTypes),
		&i.TokenEndpointAuthMethod,
		&i.Scope,
		pq.Array(&i.Contacts),
		&i.ClientUri,
		&i.LogoUri,
		&i.TosUri,
		&i.PolicyUri,
		&i.JwksUri,
		&i.Jwks,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.RegistrationAccessToken,
		&i.RegistrationClientUri,
	)
	return i, err
}

const getOAuth2ProviderAppCodeByID = `-- name: GetOAuth2ProviderAppCodeByID :one
SELECT id, created_at, expires_at, secret_prefix, hashed_secret, user_id, app_id, resource_uri, code_challenge, code_challenge_method FROM oauth2_provider_app_codes WHERE id = $1
`

func (q *Queries) GetOAuth2ProviderAppCodeByID(ctx context.Context, id uuid.UUID) (OAuth2ProviderAppCode, error) {
	row := q.db.QueryRowContext(ctx, getOAuth2ProviderAppCodeByID, id)
	var i OAuth2ProviderAppCode
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.SecretPrefix,
		&i.HashedSecret,
		&i.UserID,
		&i.AppID,
		&i.ResourceUri,
		&i.CodeChallenge,
		&i.CodeChallengeMethod,
	)
	return i, err
}

const getOAuth2ProviderAppCodeByPrefix = `-- name: GetOAuth2ProviderAppCodeByPrefix :one
SELECT id, created_at, expires_at, secret_prefix, hashed_secret, user_id, app_id, resource_uri, code_challenge, code_challenge_method FROM oauth2_provider_app_codes WHERE secret_prefix = $1
`

func (q *Queries) GetOAuth2ProviderAppCodeByPrefix(ctx context.Context, secretPrefix []byte) (OAuth2ProviderAppCode, error) {
	row := q.db.QueryRowContext(ctx, getOAuth2ProviderAppCodeByPrefix, secretPrefix)
	var i OAuth2ProviderAppCode
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.SecretPrefix,
		&i.HashedSecret,
		&i.UserID,
		&i.AppID,
		&i.ResourceUri,
		&i.CodeChallenge,
		&i.CodeChallengeMethod,
	)
	return i, err
}

const getOAuth2ProviderAppSecretByID = `-- name: GetOAuth2ProviderAppSecretByID :one
SELECT id, created_at, last_used_at, hashed_secret, display_secret, app_id, secret_prefix FROM oauth2_provider_app_secrets WHERE id = $1
`

func (q *Queries) GetOAuth2ProviderAppSecretByID(ctx context.Context, id uuid.UUID) (OAuth2ProviderAppSecret, error) {
	row := q.db.QueryRowContext(ctx, getOAuth2ProviderAppSecretByID, id)
	var i OAuth2ProviderAppSecret
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.HashedSecret,
		&i.DisplaySecret,
		&i.AppID,
		&i.SecretPrefix,
	)
	return i, err
}

const getOAuth2ProviderAppSecretByPrefix = `-- name: GetOAuth2ProviderAppSecretByPrefix :one
SELECT id, created_at, last_used_at, hashed_secret, display_secret, app_id, secret_prefix FROM oauth2_provider_app_secrets WHERE secret_prefix = $1
`

func (q *Queries) GetOAuth2ProviderAppSecretByPrefix(ctx context.Context, secretPrefix []byte) (OAuth2ProviderAppSecret, error) {
	row := q.db.QueryRowContext(ctx, getOAuth2ProviderAppSecretByPrefix, secretPrefix)
	var i OAuth2ProviderAppSecret
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.HashedSecret,
		&i.DisplaySecret,
		&i.AppID,
		&i.SecretPrefix,
	)
	return i, err
}

const getOAuth2ProviderAppSecretsByAppID = `-- name: GetOAuth2ProviderAppSecretsByAppID :many
SELECT id, created_at, last_used_at, hashed_secret, display_secret, app_id, secret_prefix FROM oauth2_provider_app_secrets WHERE app_id = $1 ORDER BY (created_at, id) ASC
`

func (q *Queries) GetOAuth2ProviderAppSecretsByAppID(ctx context.Context, appID uuid.UUID) ([]OAuth2ProviderAppSecret, error) {
	rows, err := q.db.QueryContext(ctx, getOAuth2ProviderAppSecretsByAppID, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OAuth2ProviderAppSecret
	for rows.Next() {
		var i OAuth2ProviderAppSecret
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.LastUsedAt,
			&i.HashedSecret,
			&i.DisplaySecret,
			&i.AppID,
			&i.SecretPrefix,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOAuth2ProviderAppTokenByAPIKeyID = `-- name: GetOAuth2ProviderAppTokenByAPIKeyID :one
SELECT id, created_at, expires_at, hash_prefix, refresh_hash, app_secret_id, api_key_id, audience, user_id FROM oauth2_provider_app_tokens WHERE api_key_id = $1
`

func (q *Queries) GetOAuth2ProviderAppTokenByAPIKeyID(ctx context.Context, apiKeyID string) (OAuth2ProviderAppToken, error) {
	row := q.db.QueryRowContext(ctx, getOAuth2ProviderAppTokenByAPIKeyID, apiKeyID)
	var i OAuth2ProviderAppToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.HashPrefix,
		&i.RefreshHash,
		&i.AppSecretID,
		&i.APIKeyID,
		&i.Audience,
		&i.UserID,
	)
	return i, err
}

const getOAuth2ProviderAppTokenByPrefix = `-- name: GetOAuth2ProviderAppTokenByPrefix :one
SELECT id, created_at, expires_at, hash_prefix, refresh_hash, app_secret_id, api_key_id, audience, user_id FROM oauth2_provider_app_tokens WHERE hash_prefix = $1
`

func (q *Queries) GetOAuth2ProviderAppTokenByPrefix(ctx context.Context, hashPrefix []byte) (OAuth2ProviderAppToken, error) {
	row := q.db.QueryRowContext(ctx, getOAuth2ProviderAppTokenByPrefix, hashPrefix)
	var i OAuth2ProviderAppToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.HashPrefix,
		&i.RefreshHash,
		&i.AppSecretID,
		&i.APIKeyID,
		&i.Audience,
		&i.UserID,
	)
	return i, err
}

const getOAuth2ProviderApps = `-- name: GetOAuth2ProviderApps :many
SELECT id, created_at, updated_at, name, icon, callback_url, redirect_uris, client_type, dynamically_registered, client_id_issued_at, client_secret_expires_at, grant_types, response_types, token_endpoint_auth_method, scope, contacts, client_uri, logo_uri, tos_uri, policy_uri, jwks_uri, jwks, software_id, software_version, registration_access_token, registration_client_uri FROM oauth2_provider_apps ORDER BY (name, id) ASC
`

func (q *Queries) GetOAuth2ProviderApps(ctx context.Context) ([]OAuth2ProviderApp, error) {
	rows, err := q.db.QueryContext(ctx, getOAuth2ProviderApps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OAuth2ProviderApp
	for rows.Next() {
		var i OAuth2ProviderApp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Icon,
			&i.CallbackURL,
			pq.Array(&i.RedirectUris),
			&i.ClientType,
			&i.DynamicallyRegistered,
			&i.ClientIDIssuedAt,
			&i.ClientSecretExpiresAt,
			pq.Array(&i.GrantTypes),
			pq.Array(&i.ResponseTypes),
			&i.TokenEndpointAuthMethod,
			&i.Scope,
			pq.Array(&i.Contacts),
			&i.ClientUri,
			&i.LogoUri,
			&i.TosUri,
			&i.PolicyUri,
			&i.JwksUri,
			&i.Jwks,
			&i.SoftwareID,
			&i.SoftwareVersion,
			&i.RegistrationAccessToken,
			&i.RegistrationClientUri,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOAuth2ProviderAppsByUserID = `-- name: GetOAuth2ProviderAppsByUserID :many
SELECT
  COUNT(DISTINCT oauth2_provider_app_tokens.id) as token_count,
  oauth2_provider_apps.id, oauth2_provider_apps.created_at, oauth2_provider_apps.updated_at, oauth2_provider_apps.name, oauth2_provider_apps.icon, oauth2_provider_apps.callback_url, oauth2_provider_apps.redirect_uris, oauth2_provider_apps.client_type, oauth2_provider_apps.dynamically_registered, oauth2_provider_apps.client_id_issued_at, oauth2_provider_apps.client_secret_expires_at, oauth2_provider_apps.grant_types, oauth2_provider_apps.response_types, oauth2_provider_apps.token_endpoint_auth_method, oauth2_provider_apps.scope, oauth2_provider_apps.contacts, oauth2_provider_apps.client_uri, oauth2_provider_apps.logo_uri, oauth2_provider_apps.tos_uri, oauth2_provider_apps.policy_uri, oauth2_provider_apps.jwks_uri, oauth2_provider_apps.jwks, oauth2_provider_apps.software_id, oauth2_provider_apps.software_version, oauth2_provider_apps.registration_access_token, oauth2_provider_apps.registration_client_uri
FROM oauth2_provider_app_tokens
  INNER JOIN oauth2_provider_app_secrets
    ON oauth2_provider_app_secrets.id = oauth2_provider_app_tokens.app_secret_id
  INNER JOIN oauth2_provider_apps
    ON oauth2_provider_apps.id = oauth2_provider_app_secrets.app_id
WHERE
  oauth2_provider_app_tokens.user_id = $1
GROUP BY
  oauth2_provider_apps.id
`

type GetOAuth2ProviderAppsByUserIDRow struct {
	TokenCount        int64             `db:"token_count" json:"token_count"`
	OAuth2ProviderApp OAuth2ProviderApp `db:"oauth2_provider_app" json:"oauth2_provider_app"`
}

func (q *Queries) GetOAuth2ProviderAppsByUserID(ctx context.Context, userID uuid.UUID) ([]GetOAuth2ProviderAppsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getOAuth2ProviderAppsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOAuth2ProviderAppsByUserIDRow
	for rows.Next() {
		var i GetOAuth2ProviderAppsByUserIDRow
		if err := rows.Scan(
			&i.TokenCount,
			&i.OAuth2ProviderApp.ID,
			&i.OAuth2ProviderApp.CreatedAt,
			&i.OAuth2ProviderApp.UpdatedAt,
			&i.OAuth2ProviderApp.Name,
			&i.OAuth2ProviderApp.Icon,
			&i.OAuth2ProviderApp.CallbackURL,
			pq.Array(&i.OAuth2ProviderApp.RedirectUris),
			&i.OAuth2ProviderApp.ClientType,
			&i.OAuth2ProviderApp.DynamicallyRegistered,
			&i.OAuth2ProviderApp.ClientIDIssuedAt,
			&i.OAuth2ProviderApp.ClientSecretExpiresAt,
			pq.Array(&i.OAuth2ProviderApp.GrantTypes),
			pq.Array(&i.OAuth2ProviderApp.ResponseTypes),
			&i.OAuth2ProviderApp.TokenEndpointAuthMethod,
			&i.OAuth2ProviderApp.Scope,
			pq.Array(&i.OAuth2ProviderApp.Contacts),
			&i.OAuth2ProviderApp.ClientUri,
			&i.OAuth2ProviderApp.LogoUri,
			&i.OAuth2ProviderApp.TosUri,
			&i.OAuth2ProviderApp.PolicyUri,
			&i.OAuth2ProviderApp.JwksUri,
			&i.OAuth2ProviderApp.Jwks,
			&i.OAuth2ProviderApp.SoftwareID,
			&i.OAuth2ProviderApp.SoftwareVersion,
			&i.OAuth2ProviderApp.RegistrationAccessToken,
			&i.OAuth2ProviderApp.RegistrationClientUri,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOAuth2ProviderApp = `-- name: InsertOAuth2ProviderApp :one
INSERT INTO oauth2_provider_apps (
    id,
    created_at,
    updated_at,
    name,
    icon,
    callback_url,
    redirect_uris,
    client_type,
    dynamically_registered,
    client_id_issued_at,
    client_secret_expires_at,
    grant_types,
    response_types,
    token_endpoint_auth_method,
    scope,
    contacts,
    client_uri,
    logo_uri,
    tos_uri,
    policy_uri,
    jwks_uri,
    jwks,
    software_id,
    software_version,
    registration_access_token,
    registration_client_uri
) VALUES(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
    $26
) RETURNING id, created_at, updated_at, name, icon, callback_url, redirect_uris, client_type, dynamically_registered, client_id_issued_at, client_secret_expires_at, grant_types, response_types, token_endpoint_auth_method, scope, contacts, client_uri, logo_uri, tos_uri, policy_uri, jwks_uri, jwks, software_id, software_version, registration_access_token, registration_client_uri
`

type InsertOAuth2ProviderAppParams struct {
	ID                      uuid.UUID             `db:"id" json:"id"`
	CreatedAt               time.Time             `db:"created_at" json:"created_at"`
	UpdatedAt               time.Time             `db:"updated_at" json:"updated_at"`
	Name                    string                `db:"name" json:"name"`
	Icon                    string                `db:"icon" json:"icon"`
	CallbackURL             string                `db:"callback_url" json:"callback_url"`
	RedirectUris            []string              `db:"redirect_uris" json:"redirect_uris"`
	ClientType              sql.NullString        `db:"client_type" json:"client_type"`
	DynamicallyRegistered   sql.NullBool          `db:"dynamically_registered" json:"dynamically_registered"`
	ClientIDIssuedAt        sql.NullTime          `db:"client_id_issued_at" json:"client_id_issued_at"`
	ClientSecretExpiresAt   sql.NullTime          `db:"client_secret_expires_at" json:"client_secret_expires_at"`
	GrantTypes              []string              `db:"grant_types" json:"grant_types"`
	ResponseTypes           []string              `db:"response_types" json:"response_types"`
	TokenEndpointAuthMethod sql.NullString        `db:"token_endpoint_auth_method" json:"token_endpoint_auth_method"`
	Scope                   sql.NullString        `db:"scope" json:"scope"`
	Contacts                []string              `db:"contacts" json:"contacts"`
	ClientUri               sql.NullString        `db:"client_uri" json:"client_uri"`
	LogoUri                 sql.NullString        `db:"logo_uri" json:"logo_uri"`
	TosUri                  sql.NullString        `db:"tos_uri" json:"tos_uri"`
	PolicyUri               sql.NullString        `db:"policy_uri" json:"policy_uri"`
	JwksUri                 sql.NullString        `db:"jwks_uri" json:"jwks_uri"`
	Jwks                    pqtype.NullRawMessage `db:"jwks" json:"jwks"`
	SoftwareID              sql.NullString        `db:"software_id" json:"software_id"`
	SoftwareVersion         sql.NullString        `db:"software_version" json:"software_version"`
	RegistrationAccessToken sql.NullString        `db:"registration_access_token" json:"registration_access_token"`
	RegistrationClientUri   sql.NullString        `db:"registration_client_uri" json:"registration_client_uri"`
}

func (q *Queries) InsertOAuth2ProviderApp(ctx context.Context, arg InsertOAuth2ProviderAppParams) (OAuth2ProviderApp, error) {
	row := q.db.QueryRowContext(ctx, insertOAuth2ProviderApp,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Icon,
		arg.CallbackURL,
		pq.Array(arg.RedirectUris),
		arg.ClientType,
		arg.DynamicallyRegistered,
		arg.ClientIDIssuedAt,
		arg.ClientSecretExpiresAt,
		pq.Array(arg.GrantTypes),
		pq.Array(arg.ResponseTypes),
		arg.TokenEndpointAuthMethod,
		arg.Scope,
		pq.Array(arg.Contacts),
		arg.ClientUri,
		arg.LogoUri,
		arg.TosUri,
		arg.PolicyUri,
		arg.JwksUri,
		arg.Jwks,
		arg.SoftwareID,
		arg.SoftwareVersion,
		arg.RegistrationAccessToken,
		arg.RegistrationClientUri,
	)
	var i OAuth2ProviderApp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Icon,
		&i.CallbackURL,
		pq.Array(&i.RedirectUris),
		&i.ClientType,
		&i.DynamicallyRegistered,
		&i.ClientIDIssuedAt,
		&i.ClientSecretExpiresAt,
		pq.Array(&i.GrantTypes),
		pq.Array(&i.ResponseTypes),
		&i.TokenEndpointAuthMethod,
		&i.Scope,
		pq.Array(&i.Contacts),
		&i.ClientUri,
		&i.LogoUri,
		&i.TosUri,
		&i.PolicyUri,
		&i.JwksUri,
		&i.Jwks,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.RegistrationAccessToken,
		&i.RegistrationClientUri,
	)
	return i, err
}

const insertOAuth2ProviderAppCode = `-- name: InsertOAuth2ProviderAppCode :one
INSERT INTO oauth2_provider_app_codes (
    id,
    created_at,
    expires_at,
    secret_prefix,
    hashed_secret,
    app_id,
    user_id,
    resource_uri,
    code_challenge,
    code_challenge_method
) VALUES(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
) RETURNING id, created_at, expires_at, secret_prefix, hashed_secret, user_id, app_id, resource_uri, code_challenge, code_challenge_method
`

type InsertOAuth2ProviderAppCodeParams struct {
	ID                  uuid.UUID      `db:"id" json:"id"`
	CreatedAt           time.Time      `db:"created_at" json:"created_at"`
	ExpiresAt           time.Time      `db:"expires_at" json:"expires_at"`
	SecretPrefix        []byte         `db:"secret_prefix" json:"secret_prefix"`
	HashedSecret        []byte         `db:"hashed_secret" json:"hashed_secret"`
	AppID               uuid.UUID      `db:"app_id" json:"app_id"`
	UserID              uuid.UUID      `db:"user_id" json:"user_id"`
	ResourceUri         sql.NullString `db:"resource_uri" json:"resource_uri"`
	CodeChallenge       sql.NullString `db:"code_challenge" json:"code_challenge"`
	CodeChallengeMethod sql.NullString `db:"code_challenge_method" json:"code_challenge_method"`
}

func (q *Queries) InsertOAuth2ProviderAppCode(ctx context.Context, arg InsertOAuth2ProviderAppCodeParams) (OAuth2ProviderAppCode, error) {
	row := q.db.QueryRowContext(ctx, insertOAuth2ProviderAppCode,
		arg.ID,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.SecretPrefix,
		arg.HashedSecret,
		arg.AppID,
		arg.UserID,
		arg.ResourceUri,
		arg.CodeChallenge,
		arg.CodeChallengeMethod,
	)
	var i OAuth2ProviderAppCode
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.SecretPrefix,
		&i.HashedSecret,
		&i.UserID,
		&i.AppID,
		&i.ResourceUri,
		&i.CodeChallenge,
		&i.CodeChallengeMethod,
	)
	return i, err
}

const insertOAuth2ProviderAppSecret = `-- name: InsertOAuth2ProviderAppSecret :one
INSERT INTO oauth2_provider_app_secrets (
    id,
    created_at,
    secret_prefix,
    hashed_secret,
    display_secret,
    app_id
) VALUES(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING id, created_at, last_used_at, hashed_secret, display_secret, app_id, secret_prefix
`

type InsertOAuth2ProviderAppSecretParams struct {
	ID            uuid.UUID `db:"id" json:"id"`
	CreatedAt     time.Time `db:"created_at" json:"created_at"`
	SecretPrefix  []byte    `db:"secret_prefix" json:"secret_prefix"`
	HashedSecret  []byte    `db:"hashed_secret" json:"hashed_secret"`
	DisplaySecret string    `db:"display_secret" json:"display_secret"`
	AppID         uuid.UUID `db:"app_id" json:"app_id"`
}

func (q *Queries) InsertOAuth2ProviderAppSecret(ctx context.Context, arg InsertOAuth2ProviderAppSecretParams) (OAuth2ProviderAppSecret, error) {
	row := q.db.QueryRowContext(ctx, insertOAuth2ProviderAppSecret,
		arg.ID,
		arg.CreatedAt,
		arg.SecretPrefix,
		arg.HashedSecret,
		arg.DisplaySecret,
		arg.AppID,
	)
	var i OAuth2ProviderAppSecret
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.HashedSecret,
		&i.DisplaySecret,
		&i.AppID,
		&i.SecretPrefix,
	)
	return i, err
}

const insertOAuth2ProviderAppToken = `-- name: InsertOAuth2ProviderAppToken :one
INSERT INTO oauth2_provider_app_tokens (
    id,
    created_at,
    expires_at,
    hash_prefix,
    refresh_hash,
    app_secret_id,
    api_key_id,
    user_id,
    audience
) VALUES(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
) RETURNING id, created_at, expires_at, hash_prefix, refresh_hash, app_secret_id, api_key_id, audience, user_id
`

type InsertOAuth2ProviderAppTokenParams struct {
	ID          uuid.UUID      `db:"id" json:"id"`
	CreatedAt   time.Time      `db:"created_at" json:"created_at"`
	ExpiresAt   time.Time      `db:"expires_at" json:"expires_at"`
	HashPrefix  []byte         `db:"hash_prefix" json:"hash_prefix"`
	RefreshHash []byte         `db:"refresh_hash" json:"refresh_hash"`
	AppSecretID uuid.UUID      `db:"app_secret_id" json:"app_secret_id"`
	APIKeyID    string         `db:"api_key_id" json:"api_key_id"`
	UserID      uuid.UUID      `db:"user_id" json:"user_id"`
	Audience    sql.NullString `db:"audience" json:"audience"`
}

func (q *Queries) InsertOAuth2ProviderAppToken(ctx context.Context, arg InsertOAuth2ProviderAppTokenParams) (OAuth2ProviderAppToken, error) {
	row := q.db.QueryRowContext(ctx, insertOAuth2ProviderAppToken,
		arg.ID,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.HashPrefix,
		arg.RefreshHash,
		arg.AppSecretID,
		arg.APIKeyID,
		arg.UserID,
		arg.Audience,
	)
	var i OAuth2ProviderAppToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.HashPrefix,
		&i.RefreshHash,
		&i.AppSecretID,
		&i.APIKeyID,
		&i.Audience,
		&i.UserID,
	)
	return i, err
}

const updateOAuth2ProviderAppByClientID = `-- name: UpdateOAuth2ProviderAppByClientID :one
UPDATE oauth2_provider_apps SET
    updated_at = $2,
    name = $3,
    icon = $4,
    callback_url = $5,
    redirect_uris = $6,
    client_type = $7,
    client_secret_expires_at = $8,
    grant_types = $9,
    response_types = $10,
    token_endpoint_auth_method = $11,
    scope = $12,
    contacts = $13,
    client_uri = $14,
    logo_uri = $15,
    tos_uri = $16,
    policy_uri = $17,
    jwks_uri = $18,
    jwks = $19,
    software_id = $20,
    software_version = $21
WHERE id = $1 RETURNING id, created_at, updated_at, name, icon, callback_url, redirect_uris, client_type, dynamically_registered, client_id_issued_at, client_secret_expires_at, grant_types, response_types, token_endpoint_auth_method, scope, contacts, client_uri, logo_uri, tos_uri, policy_uri, jwks_uri, jwks, software_id, software_version, registration_access_token, registration_client_uri
`

type UpdateOAuth2ProviderAppByClientIDParams struct {
	ID                      uuid.UUID             `db:"id" json:"id"`
	UpdatedAt               time.Time             `db:"updated_at" json:"updated_at"`
	Name                    string                `db:"name" json:"name"`
	Icon                    string                `db:"icon" json:"icon"`
	CallbackURL             string                `db:"callback_url" json:"callback_url"`
	RedirectUris            []string              `db:"redirect_uris" json:"redirect_uris"`
	ClientType              sql.NullString        `db:"client_type" json:"client_type"`
	ClientSecretExpiresAt   sql.NullTime          `db:"client_secret_expires_at" json:"client_secret_expires_at"`
	GrantTypes              []string              `db:"grant_types" json:"grant_types"`
	ResponseTypes           []string              `db:"response_types" json:"response_types"`
	TokenEndpointAuthMethod sql.NullString        `db:"token_endpoint_auth_method" json:"token_endpoint_auth_method"`
	Scope                   sql.NullString        `db:"scope" json:"scope"`
	Contacts                []string              `db:"contacts" json:"contacts"`
	ClientUri               sql.NullString        `db:"client_uri" json:"client_uri"`
	LogoUri                 sql.NullString        `db:"logo_uri" json:"logo_uri"`
	TosUri                  sql.NullString        `db:"tos_uri" json:"tos_uri"`
	PolicyUri               sql.NullString        `db:"policy_uri" json:"policy_uri"`
	JwksUri                 sql.NullString        `db:"jwks_uri" json:"jwks_uri"`
	Jwks                    pqtype.NullRawMessage `db:"jwks" json:"jwks"`
	SoftwareID              sql.NullString        `db:"software_id" json:"software_id"`
	SoftwareVersion         sql.NullString        `db:"software_version" json:"software_version"`
}

func (q *Queries) UpdateOAuth2ProviderAppByClientID(ctx context.Context, arg UpdateOAuth2ProviderAppByClientIDParams) (OAuth2ProviderApp, error) {
	row := q.db.QueryRowContext(ctx, updateOAuth2ProviderAppByClientID,
		arg.ID,
		arg.UpdatedAt,
		arg.Name,
		arg.Icon,
		arg.CallbackURL,
		pq.Array(arg.RedirectUris),
		arg.ClientType,
		arg.ClientSecretExpiresAt,
		pq.Array(arg.GrantTypes),
		pq.Array(arg.ResponseTypes),
		arg.TokenEndpointAuthMethod,
		arg.Scope,
		pq.Array(arg.Contacts),
		arg.ClientUri,
		arg.LogoUri,
		arg.TosUri,
		arg.PolicyUri,
		arg.JwksUri,
		arg.Jwks,
		arg.SoftwareID,
		arg.SoftwareVersion,
	)
	var i OAuth2ProviderApp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Icon,
		&i.CallbackURL,
		pq.Array(&i.RedirectUris),
		&i.ClientType,
		&i.DynamicallyRegistered,
		&i.ClientIDIssuedAt,
		&i.ClientSecretExpiresAt,
		pq.Array(&i.GrantTypes),
		pq.Array(&i.ResponseTypes),
		&i.TokenEndpointAuthMethod,
		&i.Scope,
		pq.Array(&i.Contacts),
		&i.ClientUri,
		&i.LogoUri,
		&i.TosUri,
		&i.PolicyUri,
		&i.JwksUri,
		&i.Jwks,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.RegistrationAccessToken,
		&i.RegistrationClientUri,
	)
	return i, err
}

const updateOAuth2ProviderAppByID = `-- name: UpdateOAuth2ProviderAppByID :one
UPDATE oauth2_provider_apps SET
    updated_at = $2,
    name = $3,
    icon = $4,
    callback_url = $5,
    redirect_uris = $6,
    client_type = $7,
    dynamically_registered = $8,
    client_secret_expires_at = $9,
    grant_types = $10,
    response_types = $11,
    token_endpoint_auth_method = $12,
    scope = $13,
    contacts = $14,
    client_uri = $15,
    logo_uri = $16,
    tos_uri = $17,
    policy_uri = $18,
    jwks_uri = $19,
    jwks = $20,
    software_id = $21,
    software_version = $22
WHERE id = $1 RETURNING id, created_at, updated_at, name, icon, callback_url, redirect_uris, client_type, dynamically_registered, client_id_issued_at, client_secret_expires_at, grant_types, response_types, token_endpoint_auth_method, scope, contacts, client_uri, logo_uri, tos_uri, policy_uri, jwks_uri, jwks, software_id, software_version, registration_access_token, registration_client_uri
`

type UpdateOAuth2ProviderAppByIDParams struct {
	ID                      uuid.UUID             `db:"id" json:"id"`
	UpdatedAt               time.Time             `db:"updated_at" json:"updated_at"`
	Name                    string                `db:"name" json:"name"`
	Icon                    string                `db:"icon" json:"icon"`
	CallbackURL             string                `db:"callback_url" json:"callback_url"`
	RedirectUris            []string              `db:"redirect_uris" json:"redirect_uris"`
	ClientType              sql.NullString        `db:"client_type" json:"client_type"`
	DynamicallyRegistered   sql.NullBool          `db:"dynamically_registered" json:"dynamically_registered"`
	ClientSecretExpiresAt   sql.NullTime          `db:"client_secret_expires_at" json:"client_secret_expires_at"`
	GrantTypes              []string              `db:"grant_types" json:"grant_types"`
	ResponseTypes           []string              `db:"response_types" json:"response_types"`
	TokenEndpointAuthMethod sql.NullString        `db:"token_endpoint_auth_method" json:"token_endpoint_auth_method"`
	Scope                   sql.NullString        `db:"scope" json:"scope"`
	Contacts                []string              `db:"contacts" json:"contacts"`
	ClientUri               sql.NullString        `db:"client_uri" json:"client_uri"`
	LogoUri                 sql.NullString        `db:"logo_uri" json:"logo_uri"`
	TosUri                  sql.NullString        `db:"tos_uri" json:"tos_uri"`
	PolicyUri               sql.NullString        `db:"policy_uri" json:"policy_uri"`
	JwksUri                 sql.NullString        `db:"jwks_uri" json:"jwks_uri"`
	Jwks                    pqtype.NullRawMessage `db:"jwks" json:"jwks"`
	SoftwareID              sql.NullString        `db:"software_id" json:"software_id"`
	SoftwareVersion         sql.NullString        `db:"software_version" json:"software_version"`
}

func (q *Queries) UpdateOAuth2ProviderAppByID(ctx context.Context, arg UpdateOAuth2ProviderAppByIDParams) (OAuth2ProviderApp, error) {
	row := q.db.QueryRowContext(ctx, updateOAuth2ProviderAppByID,
		arg.ID,
		arg.UpdatedAt,
		arg.Name,
		arg.Icon,
		arg.CallbackURL,
		pq.Array(arg.RedirectUris),
		arg.ClientType,
		arg.DynamicallyRegistered,
		arg.ClientSecretExpiresAt,
		pq.Array(arg.GrantTypes),
		pq.Array(arg.ResponseTypes),
		arg.TokenEndpointAuthMethod,
		arg.Scope,
		pq.Array(arg.Contacts),
		arg.ClientUri,
		arg.LogoUri,
		arg.TosUri,
		arg.PolicyUri,
		arg.JwksUri,
		arg.Jwks,
		arg.SoftwareID,
		arg.SoftwareVersion,
	)
	var i OAuth2ProviderApp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Icon,
		&i.CallbackURL,
		pq.Array(&i.RedirectUris),
		&i.ClientType,
		&i.DynamicallyRegistered,
		&i.ClientIDIssuedAt,
		&i.ClientSecretExpiresAt,
		pq.Array(&i.GrantTypes),
		pq.Array(&i.ResponseTypes),
		&i.TokenEndpointAuthMethod,
		&i.Scope,
		pq.Array(&i.Contacts),
		&i.ClientUri,
		&i.LogoUri,
		&i.TosUri,
		&i.PolicyUri,
		&i.JwksUri,
		&i.Jwks,
		&i.SoftwareID,
		&i.SoftwareVersion,
		&i.RegistrationAccessToken,
		&i.RegistrationClientUri,
	)
	return i, err
}

const updateOAuth2ProviderAppSecretByID = `-- name: UpdateOAuth2ProviderAppSecretByID :one
UPDATE oauth2_provider_app_secrets SET
    last_used_at = $2
WHERE id = $1 RETURNING id, created_at, last_used_at, hashed_secret, display_secret, app_id, secret_prefix
`

type UpdateOAuth2ProviderAppSecretByIDParams struct {
	ID         uuid.UUID    `db:"id" json:"id"`
	LastUsedAt sql.NullTime `db:"last_used_at" json:"last_used_at"`
}

func (q *Queries) UpdateOAuth2ProviderAppSecretByID(ctx context.Context, arg UpdateOAuth2ProviderAppSecretByIDParams) (OAuth2ProviderAppSecret, error) {
	row := q.db.QueryRowContext(ctx, updateOAuth2ProviderAppSecretByID, arg.ID, arg.LastUsedAt)
	var i OAuth2ProviderAppSecret
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.HashedSecret,
		&i.DisplaySecret,
		&i.AppID,
		&i.SecretPrefix,
	)
	return i, err
}
