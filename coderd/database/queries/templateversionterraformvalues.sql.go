// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: templateversionterraformvalues.sql

package database

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const getTemplateVersionTerraformValues = `-- name: GetTemplateVersionTerraformValues :one
SELECT
	template_version_terraform_values.template_version_id, template_version_terraform_values.updated_at, template_version_terraform_values.cached_plan, template_version_terraform_values.cached_module_files, template_version_terraform_values.provisionerd_version
FROM
	template_version_terraform_values
WHERE
	template_version_terraform_values.template_version_id = $1
`

func (q *Queries) GetTemplateVersionTerraformValues(ctx context.Context, templateVersionID uuid.UUID) (TemplateVersionTerraformValue, error) {
	row := q.db.QueryRowContext(ctx, getTemplateVersionTerraformValues, templateVersionID)
	var i TemplateVersionTerraformValue
	err := row.Scan(
		&i.TemplateVersionID,
		&i.UpdatedAt,
		&i.CachedPlan,
		&i.CachedModuleFiles,
		&i.ProvisionerdVersion,
	)
	return i, err
}

const insertTemplateVersionTerraformValuesByJobID = `-- name: InsertTemplateVersionTerraformValuesByJobID :exec
INSERT INTO
	template_version_terraform_values (
		template_version_id,
		cached_plan,
		cached_module_files,
		updated_at,
	    provisionerd_version
	)
VALUES
	(
		(select id from template_versions where job_id = $1),
		$2,
		$3,
		$4,
		$5
	)
`

type InsertTemplateVersionTerraformValuesByJobIDParams struct {
	JobID               uuid.UUID       `db:"job_id" json:"job_id"`
	CachedPlan          json.RawMessage `db:"cached_plan" json:"cached_plan"`
	CachedModuleFiles   uuid.NullUUID   `db:"cached_module_files" json:"cached_module_files"`
	UpdatedAt           time.Time       `db:"updated_at" json:"updated_at"`
	ProvisionerdVersion string          `db:"provisionerd_version" json:"provisionerd_version"`
}

func (q *Queries) InsertTemplateVersionTerraformValuesByJobID(ctx context.Context, arg InsertTemplateVersionTerraformValuesByJobIDParams) error {
	_, err := q.db.ExecContext(ctx, insertTemplateVersionTerraformValuesByJobID,
		arg.JobID,
		arg.CachedPlan,
		arg.CachedModuleFiles,
		arg.UpdatedAt,
		arg.ProvisionerdVersion,
	)
	return err
}
