// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: presets.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getActivePresetPrebuildSchedules = `-- name: GetActivePresetPrebuildSchedules :many
SELECT
	tvpps.id, tvpps.preset_id, tvpps.cron_expression, tvpps.desired_instances
FROM
	template_version_preset_prebuild_schedules tvpps
		INNER JOIN template_version_presets tvp ON tvp.id = tvpps.preset_id
		INNER JOIN template_versions tv ON tv.id = tvp.template_version_id
		INNER JOIN templates t ON t.id = tv.template_id
WHERE
	-- Template version is active, and template is not deleted or deprecated
	tv.id = t.active_version_id
	AND NOT t.deleted
	AND t.deprecated = ''
`

func (q *Queries) GetActivePresetPrebuildSchedules(ctx context.Context) ([]TemplateVersionPresetPrebuildSchedule, error) {
	rows, err := q.db.QueryContext(ctx, getActivePresetPrebuildSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TemplateVersionPresetPrebuildSchedule
	for rows.Next() {
		var i TemplateVersionPresetPrebuildSchedule
		if err := rows.Scan(
			&i.ID,
			&i.PresetID,
			&i.CronExpression,
			&i.DesiredInstances,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPresetByID = `-- name: GetPresetByID :one
SELECT tvp.id, tvp.template_version_id, tvp.name, tvp.created_at, tvp.desired_instances, tvp.invalidate_after_secs, tvp.prebuild_status, tvp.scheduling_timezone, tvp.is_default, tv.template_id, tv.organization_id FROM
	template_version_presets tvp
	INNER JOIN template_versions tv ON tvp.template_version_id = tv.id
WHERE tvp.id = $1
`

type GetPresetByIDRow struct {
	ID                  uuid.UUID      `db:"id" json:"id"`
	TemplateVersionID   uuid.UUID      `db:"template_version_id" json:"template_version_id"`
	Name                string         `db:"name" json:"name"`
	CreatedAt           time.Time      `db:"created_at" json:"created_at"`
	DesiredInstances    sql.NullInt32  `db:"desired_instances" json:"desired_instances"`
	InvalidateAfterSecs sql.NullInt32  `db:"invalidate_after_secs" json:"invalidate_after_secs"`
	PrebuildStatus      PrebuildStatus `db:"prebuild_status" json:"prebuild_status"`
	SchedulingTimezone  string         `db:"scheduling_timezone" json:"scheduling_timezone"`
	IsDefault           bool           `db:"is_default" json:"is_default"`
	TemplateID          uuid.NullUUID  `db:"template_id" json:"template_id"`
	OrganizationID      uuid.UUID      `db:"organization_id" json:"organization_id"`
}

func (q *Queries) GetPresetByID(ctx context.Context, presetID uuid.UUID) (GetPresetByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPresetByID, presetID)
	var i GetPresetByIDRow
	err := row.Scan(
		&i.ID,
		&i.TemplateVersionID,
		&i.Name,
		&i.CreatedAt,
		&i.DesiredInstances,
		&i.InvalidateAfterSecs,
		&i.PrebuildStatus,
		&i.SchedulingTimezone,
		&i.IsDefault,
		&i.TemplateID,
		&i.OrganizationID,
	)
	return i, err
}

const getPresetByWorkspaceBuildID = `-- name: GetPresetByWorkspaceBuildID :one
SELECT
	template_version_presets.id, template_version_presets.template_version_id, template_version_presets.name, template_version_presets.created_at, template_version_presets.desired_instances, template_version_presets.invalidate_after_secs, template_version_presets.prebuild_status, template_version_presets.scheduling_timezone, template_version_presets.is_default
FROM
	template_version_presets
	INNER JOIN workspace_builds ON workspace_builds.template_version_preset_id = template_version_presets.id
WHERE
	workspace_builds.id = $1
`

func (q *Queries) GetPresetByWorkspaceBuildID(ctx context.Context, workspaceBuildID uuid.UUID) (TemplateVersionPreset, error) {
	row := q.db.QueryRowContext(ctx, getPresetByWorkspaceBuildID, workspaceBuildID)
	var i TemplateVersionPreset
	err := row.Scan(
		&i.ID,
		&i.TemplateVersionID,
		&i.Name,
		&i.CreatedAt,
		&i.DesiredInstances,
		&i.InvalidateAfterSecs,
		&i.PrebuildStatus,
		&i.SchedulingTimezone,
		&i.IsDefault,
	)
	return i, err
}

const getPresetParametersByPresetID = `-- name: GetPresetParametersByPresetID :many
SELECT
	tvpp.id, tvpp.template_version_preset_id, tvpp.name, tvpp.value
FROM
	template_version_preset_parameters tvpp
WHERE
	tvpp.template_version_preset_id = $1
`

func (q *Queries) GetPresetParametersByPresetID(ctx context.Context, presetID uuid.UUID) ([]TemplateVersionPresetParameter, error) {
	rows, err := q.db.QueryContext(ctx, getPresetParametersByPresetID, presetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TemplateVersionPresetParameter
	for rows.Next() {
		var i TemplateVersionPresetParameter
		if err := rows.Scan(
			&i.ID,
			&i.TemplateVersionPresetID,
			&i.Name,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPresetParametersByTemplateVersionID = `-- name: GetPresetParametersByTemplateVersionID :many
SELECT
	template_version_preset_parameters.id, template_version_preset_parameters.template_version_preset_id, template_version_preset_parameters.name, template_version_preset_parameters.value
FROM
	template_version_preset_parameters
	INNER JOIN template_version_presets ON template_version_preset_parameters.template_version_preset_id = template_version_presets.id
WHERE
	template_version_presets.template_version_id = $1
`

func (q *Queries) GetPresetParametersByTemplateVersionID(ctx context.Context, templateVersionID uuid.UUID) ([]TemplateVersionPresetParameter, error) {
	rows, err := q.db.QueryContext(ctx, getPresetParametersByTemplateVersionID, templateVersionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TemplateVersionPresetParameter
	for rows.Next() {
		var i TemplateVersionPresetParameter
		if err := rows.Scan(
			&i.ID,
			&i.TemplateVersionPresetID,
			&i.Name,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPresetsByTemplateVersionID = `-- name: GetPresetsByTemplateVersionID :many
SELECT
	id, template_version_id, name, created_at, desired_instances, invalidate_after_secs, prebuild_status, scheduling_timezone, is_default
FROM
	template_version_presets
WHERE
	template_version_id = $1
`

func (q *Queries) GetPresetsByTemplateVersionID(ctx context.Context, templateVersionID uuid.UUID) ([]TemplateVersionPreset, error) {
	rows, err := q.db.QueryContext(ctx, getPresetsByTemplateVersionID, templateVersionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TemplateVersionPreset
	for rows.Next() {
		var i TemplateVersionPreset
		if err := rows.Scan(
			&i.ID,
			&i.TemplateVersionID,
			&i.Name,
			&i.CreatedAt,
			&i.DesiredInstances,
			&i.InvalidateAfterSecs,
			&i.PrebuildStatus,
			&i.SchedulingTimezone,
			&i.IsDefault,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPreset = `-- name: InsertPreset :one
INSERT INTO template_version_presets (
	id,
	template_version_id,
	name,
	created_at,
	desired_instances,
	invalidate_after_secs,
	scheduling_timezone,
	is_default
)
VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6,
	$7,
	$8
) RETURNING id, template_version_id, name, created_at, desired_instances, invalidate_after_secs, prebuild_status, scheduling_timezone, is_default
`

type InsertPresetParams struct {
	ID                  uuid.UUID     `db:"id" json:"id"`
	TemplateVersionID   uuid.UUID     `db:"template_version_id" json:"template_version_id"`
	Name                string        `db:"name" json:"name"`
	CreatedAt           time.Time     `db:"created_at" json:"created_at"`
	DesiredInstances    sql.NullInt32 `db:"desired_instances" json:"desired_instances"`
	InvalidateAfterSecs sql.NullInt32 `db:"invalidate_after_secs" json:"invalidate_after_secs"`
	SchedulingTimezone  string        `db:"scheduling_timezone" json:"scheduling_timezone"`
	IsDefault           bool          `db:"is_default" json:"is_default"`
}

func (q *Queries) InsertPreset(ctx context.Context, arg InsertPresetParams) (TemplateVersionPreset, error) {
	row := q.db.QueryRowContext(ctx, insertPreset,
		arg.ID,
		arg.TemplateVersionID,
		arg.Name,
		arg.CreatedAt,
		arg.DesiredInstances,
		arg.InvalidateAfterSecs,
		arg.SchedulingTimezone,
		arg.IsDefault,
	)
	var i TemplateVersionPreset
	err := row.Scan(
		&i.ID,
		&i.TemplateVersionID,
		&i.Name,
		&i.CreatedAt,
		&i.DesiredInstances,
		&i.InvalidateAfterSecs,
		&i.PrebuildStatus,
		&i.SchedulingTimezone,
		&i.IsDefault,
	)
	return i, err
}

const insertPresetParameters = `-- name: InsertPresetParameters :many
INSERT INTO
	template_version_preset_parameters (template_version_preset_id, name, value)
SELECT
	$1,
	unnest($2 :: TEXT[]),
	unnest($3 :: TEXT[])
RETURNING id, template_version_preset_id, name, value
`

type InsertPresetParametersParams struct {
	TemplateVersionPresetID uuid.UUID `db:"template_version_preset_id" json:"template_version_preset_id"`
	Names                   []string  `db:"names" json:"names"`
	Values                  []string  `db:"values" json:"values"`
}

func (q *Queries) InsertPresetParameters(ctx context.Context, arg InsertPresetParametersParams) ([]TemplateVersionPresetParameter, error) {
	rows, err := q.db.QueryContext(ctx, insertPresetParameters, arg.TemplateVersionPresetID, pq.Array(arg.Names), pq.Array(arg.Values))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TemplateVersionPresetParameter
	for rows.Next() {
		var i TemplateVersionPresetParameter
		if err := rows.Scan(
			&i.ID,
			&i.TemplateVersionPresetID,
			&i.Name,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPresetPrebuildSchedule = `-- name: InsertPresetPrebuildSchedule :one
INSERT INTO template_version_preset_prebuild_schedules (
	preset_id,
	cron_expression,
	desired_instances
)
VALUES (
	$1,
	$2,
	$3
) RETURNING id, preset_id, cron_expression, desired_instances
`

type InsertPresetPrebuildScheduleParams struct {
	PresetID         uuid.UUID `db:"preset_id" json:"preset_id"`
	CronExpression   string    `db:"cron_expression" json:"cron_expression"`
	DesiredInstances int32     `db:"desired_instances" json:"desired_instances"`
}

func (q *Queries) InsertPresetPrebuildSchedule(ctx context.Context, arg InsertPresetPrebuildScheduleParams) (TemplateVersionPresetPrebuildSchedule, error) {
	row := q.db.QueryRowContext(ctx, insertPresetPrebuildSchedule, arg.PresetID, arg.CronExpression, arg.DesiredInstances)
	var i TemplateVersionPresetPrebuildSchedule
	err := row.Scan(
		&i.ID,
		&i.PresetID,
		&i.CronExpression,
		&i.DesiredInstances,
	)
	return i, err
}

const updatePresetPrebuildStatus = `-- name: UpdatePresetPrebuildStatus :exec
UPDATE template_version_presets
SET prebuild_status = $1
WHERE id = $2
`

type UpdatePresetPrebuildStatusParams struct {
	Status   PrebuildStatus `db:"status" json:"status"`
	PresetID uuid.UUID      `db:"preset_id" json:"preset_id"`
}

func (q *Queries) UpdatePresetPrebuildStatus(ctx context.Context, arg UpdatePresetPrebuildStatusParams) error {
	_, err := q.db.ExecContext(ctx, updatePresetPrebuildStatus, arg.Status, arg.PresetID)
	return err
}
