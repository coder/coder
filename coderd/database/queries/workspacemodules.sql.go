// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workspacemodules.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getWorkspaceModulesByJobID = `-- name: GetWorkspaceModulesByJobID :many
SELECT
	id, job_id, transition, source, version, key, created_at
FROM
	workspace_modules
WHERE
	job_id = $1
`

func (q *Queries) GetWorkspaceModulesByJobID(ctx context.Context, jobID uuid.UUID) ([]WorkspaceModule, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspaceModulesByJobID, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkspaceModule
	for rows.Next() {
		var i WorkspaceModule
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.Transition,
			&i.Source,
			&i.Version,
			&i.Key,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceModulesCreatedAfter = `-- name: GetWorkspaceModulesCreatedAfter :many
SELECT id, job_id, transition, source, version, key, created_at FROM workspace_modules WHERE created_at > $1
`

func (q *Queries) GetWorkspaceModulesCreatedAfter(ctx context.Context, createdAt time.Time) ([]WorkspaceModule, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspaceModulesCreatedAfter, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkspaceModule
	for rows.Next() {
		var i WorkspaceModule
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.Transition,
			&i.Source,
			&i.Version,
			&i.Key,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertWorkspaceModule = `-- name: InsertWorkspaceModule :one
INSERT INTO
	workspace_modules (id, job_id, transition, source, version, key, created_at)
VALUES
	($1, $2, $3, $4, $5, $6, $7) RETURNING id, job_id, transition, source, version, key, created_at
`

type InsertWorkspaceModuleParams struct {
	ID         uuid.UUID           `db:"id" json:"id"`
	JobID      uuid.UUID           `db:"job_id" json:"job_id"`
	Transition WorkspaceTransition `db:"transition" json:"transition"`
	Source     string              `db:"source" json:"source"`
	Version    string              `db:"version" json:"version"`
	Key        string              `db:"key" json:"key"`
	CreatedAt  time.Time           `db:"created_at" json:"created_at"`
}

func (q *Queries) InsertWorkspaceModule(ctx context.Context, arg InsertWorkspaceModuleParams) (WorkspaceModule, error) {
	row := q.db.QueryRowContext(ctx, insertWorkspaceModule,
		arg.ID,
		arg.JobID,
		arg.Transition,
		arg.Source,
		arg.Version,
		arg.Key,
		arg.CreatedAt,
	)
	var i WorkspaceModule
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.Transition,
		&i.Source,
		&i.Version,
		&i.Key,
		&i.CreatedAt,
	)
	return i, err
}
