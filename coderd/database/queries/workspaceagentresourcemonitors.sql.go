// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workspaceagentresourcemonitors.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const fetchMemoryResourceMonitorsByAgentID = `-- name: FetchMemoryResourceMonitorsByAgentID :one
SELECT
	agent_id, enabled, threshold, created_at, updated_at, state, debounced_until
FROM
	workspace_agent_memory_resource_monitors
WHERE
	agent_id = $1
`

func (q *Queries) FetchMemoryResourceMonitorsByAgentID(ctx context.Context, agentID uuid.UUID) (WorkspaceAgentMemoryResourceMonitor, error) {
	row := q.db.QueryRowContext(ctx, fetchMemoryResourceMonitorsByAgentID, agentID)
	var i WorkspaceAgentMemoryResourceMonitor
	err := row.Scan(
		&i.AgentID,
		&i.Enabled,
		&i.Threshold,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.State,
		&i.DebouncedUntil,
	)
	return i, err
}

const fetchMemoryResourceMonitorsUpdatedAfter = `-- name: FetchMemoryResourceMonitorsUpdatedAfter :many
SELECT
	agent_id, enabled, threshold, created_at, updated_at, state, debounced_until
FROM
	workspace_agent_memory_resource_monitors
WHERE
	updated_at > $1
`

func (q *Queries) FetchMemoryResourceMonitorsUpdatedAfter(ctx context.Context, updatedAt time.Time) ([]WorkspaceAgentMemoryResourceMonitor, error) {
	rows, err := q.db.QueryContext(ctx, fetchMemoryResourceMonitorsUpdatedAfter, updatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkspaceAgentMemoryResourceMonitor
	for rows.Next() {
		var i WorkspaceAgentMemoryResourceMonitor
		if err := rows.Scan(
			&i.AgentID,
			&i.Enabled,
			&i.Threshold,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.State,
			&i.DebouncedUntil,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchVolumesResourceMonitorsByAgentID = `-- name: FetchVolumesResourceMonitorsByAgentID :many
SELECT
	agent_id, enabled, threshold, path, created_at, updated_at, state, debounced_until
FROM
	workspace_agent_volume_resource_monitors
WHERE
	agent_id = $1
`

func (q *Queries) FetchVolumesResourceMonitorsByAgentID(ctx context.Context, agentID uuid.UUID) ([]WorkspaceAgentVolumeResourceMonitor, error) {
	rows, err := q.db.QueryContext(ctx, fetchVolumesResourceMonitorsByAgentID, agentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkspaceAgentVolumeResourceMonitor
	for rows.Next() {
		var i WorkspaceAgentVolumeResourceMonitor
		if err := rows.Scan(
			&i.AgentID,
			&i.Enabled,
			&i.Threshold,
			&i.Path,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.State,
			&i.DebouncedUntil,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchVolumesResourceMonitorsUpdatedAfter = `-- name: FetchVolumesResourceMonitorsUpdatedAfter :many
SELECT
	agent_id, enabled, threshold, path, created_at, updated_at, state, debounced_until
FROM
	workspace_agent_volume_resource_monitors
WHERE
	updated_at > $1
`

func (q *Queries) FetchVolumesResourceMonitorsUpdatedAfter(ctx context.Context, updatedAt time.Time) ([]WorkspaceAgentVolumeResourceMonitor, error) {
	rows, err := q.db.QueryContext(ctx, fetchVolumesResourceMonitorsUpdatedAfter, updatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkspaceAgentVolumeResourceMonitor
	for rows.Next() {
		var i WorkspaceAgentVolumeResourceMonitor
		if err := rows.Scan(
			&i.AgentID,
			&i.Enabled,
			&i.Threshold,
			&i.Path,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.State,
			&i.DebouncedUntil,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMemoryResourceMonitor = `-- name: InsertMemoryResourceMonitor :one
INSERT INTO
	workspace_agent_memory_resource_monitors (
		agent_id,
		enabled,
		state,
		threshold,
		created_at,
		updated_at,
		debounced_until
	)
VALUES
	($1, $2, $3, $4, $5, $6, $7) RETURNING agent_id, enabled, threshold, created_at, updated_at, state, debounced_until
`

type InsertMemoryResourceMonitorParams struct {
	AgentID        uuid.UUID                  `db:"agent_id" json:"agent_id"`
	Enabled        bool                       `db:"enabled" json:"enabled"`
	State          WorkspaceAgentMonitorState `db:"state" json:"state"`
	Threshold      int32                      `db:"threshold" json:"threshold"`
	CreatedAt      time.Time                  `db:"created_at" json:"created_at"`
	UpdatedAt      time.Time                  `db:"updated_at" json:"updated_at"`
	DebouncedUntil time.Time                  `db:"debounced_until" json:"debounced_until"`
}

func (q *Queries) InsertMemoryResourceMonitor(ctx context.Context, arg InsertMemoryResourceMonitorParams) (WorkspaceAgentMemoryResourceMonitor, error) {
	row := q.db.QueryRowContext(ctx, insertMemoryResourceMonitor,
		arg.AgentID,
		arg.Enabled,
		arg.State,
		arg.Threshold,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DebouncedUntil,
	)
	var i WorkspaceAgentMemoryResourceMonitor
	err := row.Scan(
		&i.AgentID,
		&i.Enabled,
		&i.Threshold,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.State,
		&i.DebouncedUntil,
	)
	return i, err
}

const insertVolumeResourceMonitor = `-- name: InsertVolumeResourceMonitor :one
INSERT INTO
	workspace_agent_volume_resource_monitors (
		agent_id,
		path,
		enabled,
		state,
		threshold,
		created_at,
		updated_at,
		debounced_until
	)
VALUES
	($1, $2, $3, $4, $5, $6, $7, $8) RETURNING agent_id, enabled, threshold, path, created_at, updated_at, state, debounced_until
`

type InsertVolumeResourceMonitorParams struct {
	AgentID        uuid.UUID                  `db:"agent_id" json:"agent_id"`
	Path           string                     `db:"path" json:"path"`
	Enabled        bool                       `db:"enabled" json:"enabled"`
	State          WorkspaceAgentMonitorState `db:"state" json:"state"`
	Threshold      int32                      `db:"threshold" json:"threshold"`
	CreatedAt      time.Time                  `db:"created_at" json:"created_at"`
	UpdatedAt      time.Time                  `db:"updated_at" json:"updated_at"`
	DebouncedUntil time.Time                  `db:"debounced_until" json:"debounced_until"`
}

func (q *Queries) InsertVolumeResourceMonitor(ctx context.Context, arg InsertVolumeResourceMonitorParams) (WorkspaceAgentVolumeResourceMonitor, error) {
	row := q.db.QueryRowContext(ctx, insertVolumeResourceMonitor,
		arg.AgentID,
		arg.Path,
		arg.Enabled,
		arg.State,
		arg.Threshold,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DebouncedUntil,
	)
	var i WorkspaceAgentVolumeResourceMonitor
	err := row.Scan(
		&i.AgentID,
		&i.Enabled,
		&i.Threshold,
		&i.Path,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.State,
		&i.DebouncedUntil,
	)
	return i, err
}

const updateMemoryResourceMonitor = `-- name: UpdateMemoryResourceMonitor :exec
UPDATE workspace_agent_memory_resource_monitors
SET
	updated_at = $2,
	state = $3,
	debounced_until = $4
WHERE
	agent_id = $1
`

type UpdateMemoryResourceMonitorParams struct {
	AgentID        uuid.UUID                  `db:"agent_id" json:"agent_id"`
	UpdatedAt      time.Time                  `db:"updated_at" json:"updated_at"`
	State          WorkspaceAgentMonitorState `db:"state" json:"state"`
	DebouncedUntil time.Time                  `db:"debounced_until" json:"debounced_until"`
}

func (q *Queries) UpdateMemoryResourceMonitor(ctx context.Context, arg UpdateMemoryResourceMonitorParams) error {
	_, err := q.db.ExecContext(ctx, updateMemoryResourceMonitor,
		arg.AgentID,
		arg.UpdatedAt,
		arg.State,
		arg.DebouncedUntil,
	)
	return err
}

const updateVolumeResourceMonitor = `-- name: UpdateVolumeResourceMonitor :exec
UPDATE workspace_agent_volume_resource_monitors
SET
		updated_at = $3,
		state = $4,
		debounced_until = $5
WHERE
		agent_id = $1 AND path = $2
`

type UpdateVolumeResourceMonitorParams struct {
	AgentID        uuid.UUID                  `db:"agent_id" json:"agent_id"`
	Path           string                     `db:"path" json:"path"`
	UpdatedAt      time.Time                  `db:"updated_at" json:"updated_at"`
	State          WorkspaceAgentMonitorState `db:"state" json:"state"`
	DebouncedUntil time.Time                  `db:"debounced_until" json:"debounced_until"`
}

func (q *Queries) UpdateVolumeResourceMonitor(ctx context.Context, arg UpdateVolumeResourceMonitorParams) error {
	_, err := q.db.ExecContext(ctx, updateVolumeResourceMonitor,
		arg.AgentID,
		arg.Path,
		arg.UpdatedAt,
		arg.State,
		arg.DebouncedUntil,
	)
	return err
}
