// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workspaceagentdevcontainers.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getWorkspaceAgentDevcontainersByAgentID = `-- name: GetWorkspaceAgentDevcontainersByAgentID :many
SELECT
	id, workspace_agent_id, created_at, workspace_folder, config_path, name
FROM
	workspace_agent_devcontainers
WHERE
	workspace_agent_id = $1
ORDER BY
	created_at, id
`

func (q *Queries) GetWorkspaceAgentDevcontainersByAgentID(ctx context.Context, workspaceAgentID uuid.UUID) ([]WorkspaceAgentDevcontainer, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspaceAgentDevcontainersByAgentID, workspaceAgentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkspaceAgentDevcontainer
	for rows.Next() {
		var i WorkspaceAgentDevcontainer
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceAgentID,
			&i.CreatedAt,
			&i.WorkspaceFolder,
			&i.ConfigPath,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertWorkspaceAgentDevcontainers = `-- name: InsertWorkspaceAgentDevcontainers :many
INSERT INTO
	workspace_agent_devcontainers (workspace_agent_id, created_at, id, name, workspace_folder, config_path)
SELECT
	$1::uuid AS workspace_agent_id,
	$2::timestamptz AS created_at,
	unnest($3::uuid[]) AS id,
	unnest($4::text[]) AS name,
	unnest($5::text[]) AS workspace_folder,
	unnest($6::text[]) AS config_path
RETURNING workspace_agent_devcontainers.id, workspace_agent_devcontainers.workspace_agent_id, workspace_agent_devcontainers.created_at, workspace_agent_devcontainers.workspace_folder, workspace_agent_devcontainers.config_path, workspace_agent_devcontainers.name
`

type InsertWorkspaceAgentDevcontainersParams struct {
	WorkspaceAgentID uuid.UUID   `db:"workspace_agent_id" json:"workspace_agent_id"`
	CreatedAt        time.Time   `db:"created_at" json:"created_at"`
	ID               []uuid.UUID `db:"id" json:"id"`
	Name             []string    `db:"name" json:"name"`
	WorkspaceFolder  []string    `db:"workspace_folder" json:"workspace_folder"`
	ConfigPath       []string    `db:"config_path" json:"config_path"`
}

func (q *Queries) InsertWorkspaceAgentDevcontainers(ctx context.Context, arg InsertWorkspaceAgentDevcontainersParams) ([]WorkspaceAgentDevcontainer, error) {
	rows, err := q.db.QueryContext(ctx, insertWorkspaceAgentDevcontainers,
		arg.WorkspaceAgentID,
		arg.CreatedAt,
		pq.Array(arg.ID),
		pq.Array(arg.Name),
		pq.Array(arg.WorkspaceFolder),
		pq.Array(arg.ConfigPath),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkspaceAgentDevcontainer
	for rows.Next() {
		var i WorkspaceAgentDevcontainer
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceAgentID,
			&i.CreatedAt,
			&i.WorkspaceFolder,
			&i.ConfigPath,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
