// Code generated by sqlc. DO NOT EDIT.
// source: projectversions.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getProjectVersionByID = `-- name: GetProjectVersionByID :one
SELECT
	id, project_id, organization_id, created_at, updated_at, name, description, job_id
FROM
	project_versions
WHERE
	id = $1
`

func (q *sqlQuerier) GetProjectVersionByID(ctx context.Context, id uuid.UUID) (ProjectVersion, error) {
	row := q.db.QueryRowContext(ctx, getProjectVersionByID, id)
	var i ProjectVersion
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.JobID,
	)
	return i, err
}

const getProjectVersionByJobID = `-- name: GetProjectVersionByJobID :one
SELECT
	id, project_id, organization_id, created_at, updated_at, name, description, job_id
FROM
	project_versions
WHERE
	job_id = $1
`

func (q *sqlQuerier) GetProjectVersionByJobID(ctx context.Context, jobID uuid.UUID) (ProjectVersion, error) {
	row := q.db.QueryRowContext(ctx, getProjectVersionByJobID, jobID)
	var i ProjectVersion
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.JobID,
	)
	return i, err
}

const getProjectVersionByProjectIDAndName = `-- name: GetProjectVersionByProjectIDAndName :one
SELECT
	id, project_id, organization_id, created_at, updated_at, name, description, job_id
FROM
	project_versions
WHERE
	project_id = $1
	AND "name" = $2
`

type GetProjectVersionByProjectIDAndNameParams struct {
	ProjectID uuid.NullUUID `db:"project_id" json:"project_id"`
	Name      string        `db:"name" json:"name"`
}

func (q *sqlQuerier) GetProjectVersionByProjectIDAndName(ctx context.Context, arg GetProjectVersionByProjectIDAndNameParams) (ProjectVersion, error) {
	row := q.db.QueryRowContext(ctx, getProjectVersionByProjectIDAndName, arg.ProjectID, arg.Name)
	var i ProjectVersion
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.JobID,
	)
	return i, err
}

const getProjectVersionsByProjectID = `-- name: GetProjectVersionsByProjectID :many
SELECT
	id, project_id, organization_id, created_at, updated_at, name, description, job_id
FROM
	project_versions
WHERE
	project_id = $1 :: uuid
`

func (q *sqlQuerier) GetProjectVersionsByProjectID(ctx context.Context, dollar_1 uuid.UUID) ([]ProjectVersion, error) {
	rows, err := q.db.QueryContext(ctx, getProjectVersionsByProjectID, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectVersion
	for rows.Next() {
		var i ProjectVersion
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.OrganizationID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.JobID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertProjectVersion = `-- name: InsertProjectVersion :one
INSERT INTO
	project_versions (
		id,
		project_id,
		organization_id,
		created_at,
		updated_at,
		"name",
		description,
		job_id
	)
VALUES
	($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, project_id, organization_id, created_at, updated_at, name, description, job_id
`

type InsertProjectVersionParams struct {
	ID             uuid.UUID     `db:"id" json:"id"`
	ProjectID      uuid.NullUUID `db:"project_id" json:"project_id"`
	OrganizationID string        `db:"organization_id" json:"organization_id"`
	CreatedAt      time.Time     `db:"created_at" json:"created_at"`
	UpdatedAt      time.Time     `db:"updated_at" json:"updated_at"`
	Name           string        `db:"name" json:"name"`
	Description    string        `db:"description" json:"description"`
	JobID          uuid.UUID     `db:"job_id" json:"job_id"`
}

func (q *sqlQuerier) InsertProjectVersion(ctx context.Context, arg InsertProjectVersionParams) (ProjectVersion, error) {
	row := q.db.QueryRowContext(ctx, insertProjectVersion,
		arg.ID,
		arg.ProjectID,
		arg.OrganizationID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Description,
		arg.JobID,
	)
	var i ProjectVersion
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.JobID,
	)
	return i, err
}

const updateProjectVersionByID = `-- name: UpdateProjectVersionByID :exec
UPDATE
	project_versions
SET
	project_id = $2,
	updated_at = $3
WHERE
	id = $1
`

type UpdateProjectVersionByIDParams struct {
	ID        uuid.UUID     `db:"id" json:"id"`
	ProjectID uuid.NullUUID `db:"project_id" json:"project_id"`
	UpdatedAt time.Time     `db:"updated_at" json:"updated_at"`
}

func (q *sqlQuerier) UpdateProjectVersionByID(ctx context.Context, arg UpdateProjectVersionByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateProjectVersionByID, arg.ID, arg.ProjectID, arg.UpdatedAt)
	return err
}
