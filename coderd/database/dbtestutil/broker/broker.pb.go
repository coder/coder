// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.4
// source: coderd/database/dbtestutil/broker/broker.proto

package broker

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status_StatusCode int32

const (
	Status_OK                      Status_StatusCode = 0
	Status_ERR_TEMPLATE_MISSING    Status_StatusCode = 1
	Status_ERR_INTERNAL            Status_StatusCode = 2
	Status_ERR_POSTGRES_CONNECTION Status_StatusCode = 3
	Status_ERR_DB_NOT_FOUND        Status_StatusCode = 4
	Status_ERR_BAD_DB_NAME         Status_StatusCode = 5
)

// Enum value maps for Status_StatusCode.
var (
	Status_StatusCode_name = map[int32]string{
		0: "OK",
		1: "ERR_TEMPLATE_MISSING",
		2: "ERR_INTERNAL",
		3: "ERR_POSTGRES_CONNECTION",
		4: "ERR_DB_NOT_FOUND",
		5: "ERR_BAD_DB_NAME",
	}
	Status_StatusCode_value = map[string]int32{
		"OK":                      0,
		"ERR_TEMPLATE_MISSING":    1,
		"ERR_INTERNAL":            2,
		"ERR_POSTGRES_CONNECTION": 3,
		"ERR_DB_NOT_FOUND":        4,
		"ERR_BAD_DB_NAME":         5,
	}
)

func (x Status_StatusCode) Enum() *Status_StatusCode {
	p := new(Status_StatusCode)
	*p = x
	return p
}

func (x Status_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_coderd_database_dbtestutil_broker_broker_proto_enumTypes[0].Descriptor()
}

func (Status_StatusCode) Type() protoreflect.EnumType {
	return &file_coderd_database_dbtestutil_broker_broker_proto_enumTypes[0]
}

func (x Status_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status_StatusCode.Descriptor instead.
func (Status_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_coderd_database_dbtestutil_broker_broker_proto_rawDescGZIP(), []int{0, 0}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    Status_StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=coder.database.dbtestutil.broker.Status_StatusCode" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_coderd_database_dbtestutil_broker_broker_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetCode() Status_StatusCode {
	if x != nil {
		return x.Code
	}
	return Status_OK
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbName string `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_coderd_database_dbtestutil_broker_broker_proto_rawDescGZIP(), []int{1}
}

func (x *QueryRequest) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// right now we just care whether the DB exists, which it does if we get status.code == OK
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_coderd_database_dbtestutil_broker_broker_proto_rawDescGZIP(), []int{2}
}

func (x *QueryResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CloneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateDbName string `protobuf:"bytes,1,opt,name=template_db_name,json=templateDbName,proto3" json:"template_db_name,omitempty"`
}

func (x *CloneRequest) Reset() {
	*x = CloneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneRequest) ProtoMessage() {}

func (x *CloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneRequest.ProtoReflect.Descriptor instead.
func (*CloneRequest) Descriptor() ([]byte, []int) {
	return file_coderd_database_dbtestutil_broker_broker_proto_rawDescGZIP(), []int{3}
}

func (x *CloneRequest) GetTemplateDbName() string {
	if x != nil {
		return x.TemplateDbName
	}
	return ""
}

type CloneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DbName string  `protobuf:"bytes,2,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
}

func (x *CloneResponse) Reset() {
	*x = CloneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneResponse) ProtoMessage() {}

func (x *CloneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneResponse.ProtoReflect.Descriptor instead.
func (*CloneResponse) Descriptor() ([]byte, []int) {
	return file_coderd_database_dbtestutil_broker_broker_proto_rawDescGZIP(), []int{4}
}

func (x *CloneResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CloneResponse) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

type DiscardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbName string `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
}

func (x *DiscardRequest) Reset() {
	*x = DiscardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardRequest) ProtoMessage() {}

func (x *DiscardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardRequest.ProtoReflect.Descriptor instead.
func (*DiscardRequest) Descriptor() ([]byte, []int) {
	return file_coderd_database_dbtestutil_broker_broker_proto_rawDescGZIP(), []int{5}
}

func (x *DiscardRequest) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

type DiscardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DiscardResponse) Reset() {
	*x = DiscardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardResponse) ProtoMessage() {}

func (x *DiscardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardResponse.ProtoReflect.Descriptor instead.
func (*DiscardResponse) Descriptor() ([]byte, []int) {
	return file_coderd_database_dbtestutil_broker_broker_proto_rawDescGZIP(), []int{6}
}

func (x *DiscardResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_coderd_database_dbtestutil_broker_broker_proto protoreflect.FileDescriptor

var file_coderd_database_dbtestutil_broker_broker_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x64, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x64, 0x62, 0x74, 0x65, 0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x64, 0x62, 0x74, 0x65, 0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x22, 0xf6, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x64, 0x62, 0x74,
	0x65, 0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x88, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x5f, 0x54,
	0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47,
	0x52, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x41,
	0x44, 0x5f, 0x44, 0x42, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x22, 0x27, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x64, 0x62, 0x74, 0x65, 0x73, 0x74, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x38, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x6a, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x64, 0x62, 0x74, 0x65, 0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x29, 0x0a,
	0x0e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x64, 0x62, 0x74,
	0x65, 0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xcc, 0x02,
	0x0a, 0x06, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x64, 0x62, 0x74, 0x65, 0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x64, 0x62, 0x74, 0x65, 0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x68, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x64, 0x62, 0x74,
	0x65, 0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x64, 0x62, 0x74,
	0x65, 0x73, 0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x07,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x64, 0x62, 0x74, 0x65, 0x73, 0x74, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x64, 0x62, 0x74, 0x65, 0x73,
	0x74, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x64,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x64, 0x62, 0x74, 0x65, 0x73, 0x74,
	0x75, 0x74, 0x69, 0x6c, 0x2f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_coderd_database_dbtestutil_broker_broker_proto_rawDescOnce sync.Once
	file_coderd_database_dbtestutil_broker_broker_proto_rawDescData = file_coderd_database_dbtestutil_broker_broker_proto_rawDesc
)

func file_coderd_database_dbtestutil_broker_broker_proto_rawDescGZIP() []byte {
	file_coderd_database_dbtestutil_broker_broker_proto_rawDescOnce.Do(func() {
		file_coderd_database_dbtestutil_broker_broker_proto_rawDescData = protoimpl.X.CompressGZIP(file_coderd_database_dbtestutil_broker_broker_proto_rawDescData)
	})
	return file_coderd_database_dbtestutil_broker_broker_proto_rawDescData
}

var file_coderd_database_dbtestutil_broker_broker_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_coderd_database_dbtestutil_broker_broker_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_coderd_database_dbtestutil_broker_broker_proto_goTypes = []interface{}{
	(Status_StatusCode)(0),  // 0: coder.database.dbtestutil.broker.Status.StatusCode
	(*Status)(nil),          // 1: coder.database.dbtestutil.broker.Status
	(*QueryRequest)(nil),    // 2: coder.database.dbtestutil.broker.QueryRequest
	(*QueryResponse)(nil),   // 3: coder.database.dbtestutil.broker.QueryResponse
	(*CloneRequest)(nil),    // 4: coder.database.dbtestutil.broker.CloneRequest
	(*CloneResponse)(nil),   // 5: coder.database.dbtestutil.broker.CloneResponse
	(*DiscardRequest)(nil),  // 6: coder.database.dbtestutil.broker.DiscardRequest
	(*DiscardResponse)(nil), // 7: coder.database.dbtestutil.broker.DiscardResponse
}
var file_coderd_database_dbtestutil_broker_broker_proto_depIdxs = []int32{
	0, // 0: coder.database.dbtestutil.broker.Status.code:type_name -> coder.database.dbtestutil.broker.Status.StatusCode
	1, // 1: coder.database.dbtestutil.broker.QueryResponse.status:type_name -> coder.database.dbtestutil.broker.Status
	1, // 2: coder.database.dbtestutil.broker.CloneResponse.status:type_name -> coder.database.dbtestutil.broker.Status
	1, // 3: coder.database.dbtestutil.broker.DiscardResponse.status:type_name -> coder.database.dbtestutil.broker.Status
	2, // 4: coder.database.dbtestutil.broker.Broker.Query:input_type -> coder.database.dbtestutil.broker.QueryRequest
	4, // 5: coder.database.dbtestutil.broker.Broker.Clone:input_type -> coder.database.dbtestutil.broker.CloneRequest
	6, // 6: coder.database.dbtestutil.broker.Broker.Discard:input_type -> coder.database.dbtestutil.broker.DiscardRequest
	3, // 7: coder.database.dbtestutil.broker.Broker.Query:output_type -> coder.database.dbtestutil.broker.QueryResponse
	5, // 8: coder.database.dbtestutil.broker.Broker.Clone:output_type -> coder.database.dbtestutil.broker.CloneResponse
	7, // 9: coder.database.dbtestutil.broker.Broker.Discard:output_type -> coder.database.dbtestutil.broker.DiscardResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_coderd_database_dbtestutil_broker_broker_proto_init() }
func file_coderd_database_dbtestutil_broker_broker_proto_init() {
	if File_coderd_database_dbtestutil_broker_broker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderd_database_dbtestutil_broker_broker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coderd_database_dbtestutil_broker_broker_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_coderd_database_dbtestutil_broker_broker_proto_goTypes,
		DependencyIndexes: file_coderd_database_dbtestutil_broker_broker_proto_depIdxs,
		EnumInfos:         file_coderd_database_dbtestutil_broker_broker_proto_enumTypes,
		MessageInfos:      file_coderd_database_dbtestutil_broker_broker_proto_msgTypes,
	}.Build()
	File_coderd_database_dbtestutil_broker_broker_proto = out.File
	file_coderd_database_dbtestutil_broker_broker_proto_rawDesc = nil
	file_coderd_database_dbtestutil_broker_broker_proto_goTypes = nil
	file_coderd_database_dbtestutil_broker_broker_proto_depIdxs = nil
}
