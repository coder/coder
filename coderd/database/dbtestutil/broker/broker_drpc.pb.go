// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.34
// source: coderd/database/dbtestutil/broker/broker.proto

package broker

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_coderd_database_dbtestutil_broker_broker_proto struct{}

func (drpcEncoding_File_coderd_database_dbtestutil_broker_broker_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_coderd_database_dbtestutil_broker_broker_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_coderd_database_dbtestutil_broker_broker_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_coderd_database_dbtestutil_broker_broker_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_coderd_database_dbtestutil_broker_broker_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCBrokerClient interface {
	DRPCConn() drpc.Conn

	Query(ctx context.Context, in *QueryRequest) (*QueryResponse, error)
	Clone(ctx context.Context, in *CloneRequest) (*CloneResponse, error)
	Discard(ctx context.Context, in *DiscardRequest) (*DiscardResponse, error)
}

type drpcBrokerClient struct {
	cc drpc.Conn
}

func NewDRPCBrokerClient(cc drpc.Conn) DRPCBrokerClient {
	return &drpcBrokerClient{cc}
}

func (c *drpcBrokerClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcBrokerClient) Query(ctx context.Context, in *QueryRequest) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/coder.database.dbtestutil.broker.Broker/Query", drpcEncoding_File_coderd_database_dbtestutil_broker_broker_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcBrokerClient) Clone(ctx context.Context, in *CloneRequest) (*CloneResponse, error) {
	out := new(CloneResponse)
	err := c.cc.Invoke(ctx, "/coder.database.dbtestutil.broker.Broker/Clone", drpcEncoding_File_coderd_database_dbtestutil_broker_broker_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcBrokerClient) Discard(ctx context.Context, in *DiscardRequest) (*DiscardResponse, error) {
	out := new(DiscardResponse)
	err := c.cc.Invoke(ctx, "/coder.database.dbtestutil.broker.Broker/Discard", drpcEncoding_File_coderd_database_dbtestutil_broker_broker_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCBrokerServer interface {
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	Clone(context.Context, *CloneRequest) (*CloneResponse, error)
	Discard(context.Context, *DiscardRequest) (*DiscardResponse, error)
}

type DRPCBrokerUnimplementedServer struct{}

func (s *DRPCBrokerUnimplementedServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCBrokerUnimplementedServer) Clone(context.Context, *CloneRequest) (*CloneResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCBrokerUnimplementedServer) Discard(context.Context, *DiscardRequest) (*DiscardResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCBrokerDescription struct{}

func (DRPCBrokerDescription) NumMethods() int { return 3 }

func (DRPCBrokerDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/coder.database.dbtestutil.broker.Broker/Query", drpcEncoding_File_coderd_database_dbtestutil_broker_broker_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBrokerServer).
					Query(
						ctx,
						in1.(*QueryRequest),
					)
			}, DRPCBrokerServer.Query, true
	case 1:
		return "/coder.database.dbtestutil.broker.Broker/Clone", drpcEncoding_File_coderd_database_dbtestutil_broker_broker_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBrokerServer).
					Clone(
						ctx,
						in1.(*CloneRequest),
					)
			}, DRPCBrokerServer.Clone, true
	case 2:
		return "/coder.database.dbtestutil.broker.Broker/Discard", drpcEncoding_File_coderd_database_dbtestutil_broker_broker_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBrokerServer).
					Discard(
						ctx,
						in1.(*DiscardRequest),
					)
			}, DRPCBrokerServer.Discard, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterBroker(mux drpc.Mux, impl DRPCBrokerServer) error {
	return mux.Register(impl, DRPCBrokerDescription{})
}

type DRPCBroker_QueryStream interface {
	drpc.Stream
	SendAndClose(*QueryResponse) error
}

type drpcBroker_QueryStream struct {
	drpc.Stream
}

func (x *drpcBroker_QueryStream) SendAndClose(m *QueryResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_coderd_database_dbtestutil_broker_broker_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCBroker_CloneStream interface {
	drpc.Stream
	SendAndClose(*CloneResponse) error
}

type drpcBroker_CloneStream struct {
	drpc.Stream
}

func (x *drpcBroker_CloneStream) SendAndClose(m *CloneResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_coderd_database_dbtestutil_broker_broker_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCBroker_DiscardStream interface {
	drpc.Stream
	SendAndClose(*DiscardResponse) error
}

type drpcBroker_DiscardStream struct {
	drpc.Stream
}

func (x *drpcBroker_DiscardStream) SendAndClose(m *DiscardResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_coderd_database_dbtestutil_broker_broker_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
