
syntax = "proto3";
option go_package = "github.com/coder/coder/provisionerd/proto";

package provisionerd;

import "provisionersdk/proto/provisioner.proto";

// Empty indicates a successful request/response.
message Empty {}

// AcquiredJob is returned when a provisioner daemon has a job locked.
message AcquiredJob {
    message WorkspaceProvision {
        string workspace_history_id = 1;
        string workspace_name = 2;
        repeated provisioner.ParameterValue parameter_values = 3;
        bytes state = 4;
    }
    message ProjectImport {
        string project_name = 1;
        repeated provisioner.ParameterValue parameter_values = 2;
        bool skip_parameter_schemas = 3;
        bool skip_resources = 4;
    }
    string job_id = 1;
    int64 created_at = 2;
    string provisioner = 3;
    string user_name = 4;
    bytes project_source_archive = 5;
    oneof type {
        WorkspaceProvision workspace_provision = 6;
        ProjectImport project_import = 7;
    }
}

message CancelledJob {
    string job_id = 1;
    string error = 2;
}

// TransitionedResource represents a resource that knows whether
// it's existence is dependent on stop or not.
// 
// This is used on import to display start + stopped resources
// for the lifecycle of a workspace.
message TransitionedResource {
    provisioner.Resource resource = 1;
    bool destroy_on_stop = 2;
}

// CompletedJob is sent when the provisioner daemon completes a job.
message CompletedJob {
    message WorkspaceProvision {
        bytes state = 1;
        repeated provisioner.Resource resources = 2;
    }
    message ProjectImport {
        repeated provisioner.ParameterSchema parameter_schemas = 1;
        repeated provisioner.Resource start_resources = 2;
        repeated provisioner.Resource stop_resources = 3;
    }
    string job_id = 1;
    oneof type {
        WorkspaceProvision workspace_provision = 2;
        ProjectImport project_import = 3;
    }
}

// LogSource represents the sender of the log.
enum LogSource {
    PROVISIONER_DAEMON = 0;
    PROVISIONER = 1;
}

// Log represents output from a job.
message Log {
    LogSource source = 1;
    provisioner.LogLevel level = 2;
    int64 created_at = 3;
    string output = 4;
}

// JobUpdate represents an update to a job.
// There may be no log output, but this message
// should still be sent periodically as a heartbeat.
message JobUpdate {
    string job_id = 1;
    repeated Log logs = 2;
}

service ProvisionerDaemon {
    // AcquireJob requests a job. Implementations should
    // hold a lock on the job until CompleteJob() is
    // called with the matching ID.
    rpc AcquireJob(Empty) returns (AcquiredJob);
    
    // UpdateJob streams periodic updates for a job.
    // Implementations should buffer logs so this stream
    // is non-blocking.
    rpc UpdateJob(stream JobUpdate) returns (Empty);
    
    // CancelJob indicates a job has been cancelled with
    // an error message.
    rpc CancelJob(CancelledJob) returns (Empty);

    // CompleteJob indicates a job has been completed.
    rpc CompleteJob(CompletedJob) returns (Empty);
}