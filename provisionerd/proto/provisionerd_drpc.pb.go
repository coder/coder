// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.26
// source: provisionerd/proto/provisionerd.proto

package proto

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_provisionerd_proto_provisionerd_proto struct{}

func (drpcEncoding_File_provisionerd_proto_provisionerd_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_provisionerd_proto_provisionerd_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_provisionerd_proto_provisionerd_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_provisionerd_proto_provisionerd_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_provisionerd_proto_provisionerd_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCProvisionerDaemonClient interface {
	DRPCConn() drpc.Conn

	AcquireJob(ctx context.Context, in *Empty) (*AcquiredJob, error)
	UpdateJob(ctx context.Context) (DRPCProvisionerDaemon_UpdateJobClient, error)
	CancelJob(ctx context.Context, in *CancelledJob) (*Empty, error)
	CompleteJob(ctx context.Context, in *CompletedJob) (*Empty, error)
}

type drpcProvisionerDaemonClient struct {
	cc drpc.Conn
}

func NewDRPCProvisionerDaemonClient(cc drpc.Conn) DRPCProvisionerDaemonClient {
	return &drpcProvisionerDaemonClient{cc}
}

func (c *drpcProvisionerDaemonClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcProvisionerDaemonClient) AcquireJob(ctx context.Context, in *Empty) (*AcquiredJob, error) {
	out := new(AcquiredJob)
	err := c.cc.Invoke(ctx, "/provisionerd.ProvisionerDaemon/AcquireJob", drpcEncoding_File_provisionerd_proto_provisionerd_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcProvisionerDaemonClient) UpdateJob(ctx context.Context) (DRPCProvisionerDaemon_UpdateJobClient, error) {
	stream, err := c.cc.NewStream(ctx, "/provisionerd.ProvisionerDaemon/UpdateJob", drpcEncoding_File_provisionerd_proto_provisionerd_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcProvisionerDaemon_UpdateJobClient{stream}
	return x, nil
}

type DRPCProvisionerDaemon_UpdateJobClient interface {
	drpc.Stream
	Send(*JobUpdate) error
	CloseAndRecv() (*Empty, error)
}

type drpcProvisionerDaemon_UpdateJobClient struct {
	drpc.Stream
}

func (x *drpcProvisionerDaemon_UpdateJobClient) Send(m *JobUpdate) error {
	return x.MsgSend(m, drpcEncoding_File_provisionerd_proto_provisionerd_proto{})
}

func (x *drpcProvisionerDaemon_UpdateJobClient) CloseAndRecv() (*Empty, error) {
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.MsgRecv(m, drpcEncoding_File_provisionerd_proto_provisionerd_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcProvisionerDaemon_UpdateJobClient) CloseAndRecvMsg(m *Empty) error {
	if err := x.CloseSend(); err != nil {
		return err
	}
	return x.MsgRecv(m, drpcEncoding_File_provisionerd_proto_provisionerd_proto{})
}

func (c *drpcProvisionerDaemonClient) CancelJob(ctx context.Context, in *CancelledJob) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/provisionerd.ProvisionerDaemon/CancelJob", drpcEncoding_File_provisionerd_proto_provisionerd_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcProvisionerDaemonClient) CompleteJob(ctx context.Context, in *CompletedJob) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/provisionerd.ProvisionerDaemon/CompleteJob", drpcEncoding_File_provisionerd_proto_provisionerd_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCProvisionerDaemonServer interface {
	AcquireJob(context.Context, *Empty) (*AcquiredJob, error)
	UpdateJob(DRPCProvisionerDaemon_UpdateJobStream) error
	CancelJob(context.Context, *CancelledJob) (*Empty, error)
	CompleteJob(context.Context, *CompletedJob) (*Empty, error)
}

type DRPCProvisionerDaemonUnimplementedServer struct{}

func (s *DRPCProvisionerDaemonUnimplementedServer) AcquireJob(context.Context, *Empty) (*AcquiredJob, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCProvisionerDaemonUnimplementedServer) UpdateJob(DRPCProvisionerDaemon_UpdateJobStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCProvisionerDaemonUnimplementedServer) CancelJob(context.Context, *CancelledJob) (*Empty, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCProvisionerDaemonUnimplementedServer) CompleteJob(context.Context, *CompletedJob) (*Empty, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCProvisionerDaemonDescription struct{}

func (DRPCProvisionerDaemonDescription) NumMethods() int { return 4 }

func (DRPCProvisionerDaemonDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/provisionerd.ProvisionerDaemon/AcquireJob", drpcEncoding_File_provisionerd_proto_provisionerd_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCProvisionerDaemonServer).
					AcquireJob(
						ctx,
						in1.(*Empty),
					)
			}, DRPCProvisionerDaemonServer.AcquireJob, true
	case 1:
		return "/provisionerd.ProvisionerDaemon/UpdateJob", drpcEncoding_File_provisionerd_proto_provisionerd_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCProvisionerDaemonServer).
					UpdateJob(
						&drpcProvisionerDaemon_UpdateJobStream{in1.(drpc.Stream)},
					)
			}, DRPCProvisionerDaemonServer.UpdateJob, true
	case 2:
		return "/provisionerd.ProvisionerDaemon/CancelJob", drpcEncoding_File_provisionerd_proto_provisionerd_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCProvisionerDaemonServer).
					CancelJob(
						ctx,
						in1.(*CancelledJob),
					)
			}, DRPCProvisionerDaemonServer.CancelJob, true
	case 3:
		return "/provisionerd.ProvisionerDaemon/CompleteJob", drpcEncoding_File_provisionerd_proto_provisionerd_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCProvisionerDaemonServer).
					CompleteJob(
						ctx,
						in1.(*CompletedJob),
					)
			}, DRPCProvisionerDaemonServer.CompleteJob, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterProvisionerDaemon(mux drpc.Mux, impl DRPCProvisionerDaemonServer) error {
	return mux.Register(impl, DRPCProvisionerDaemonDescription{})
}

type DRPCProvisionerDaemon_AcquireJobStream interface {
	drpc.Stream
	SendAndClose(*AcquiredJob) error
}

type drpcProvisionerDaemon_AcquireJobStream struct {
	drpc.Stream
}

func (x *drpcProvisionerDaemon_AcquireJobStream) SendAndClose(m *AcquiredJob) error {
	if err := x.MsgSend(m, drpcEncoding_File_provisionerd_proto_provisionerd_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCProvisionerDaemon_UpdateJobStream interface {
	drpc.Stream
	SendAndClose(*Empty) error
	Recv() (*JobUpdate, error)
}

type drpcProvisionerDaemon_UpdateJobStream struct {
	drpc.Stream
}

func (x *drpcProvisionerDaemon_UpdateJobStream) SendAndClose(m *Empty) error {
	if err := x.MsgSend(m, drpcEncoding_File_provisionerd_proto_provisionerd_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

func (x *drpcProvisionerDaemon_UpdateJobStream) Recv() (*JobUpdate, error) {
	m := new(JobUpdate)
	if err := x.MsgRecv(m, drpcEncoding_File_provisionerd_proto_provisionerd_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcProvisionerDaemon_UpdateJobStream) RecvMsg(m *JobUpdate) error {
	return x.MsgRecv(m, drpcEncoding_File_provisionerd_proto_provisionerd_proto{})
}

type DRPCProvisionerDaemon_CancelJobStream interface {
	drpc.Stream
	SendAndClose(*Empty) error
}

type drpcProvisionerDaemon_CancelJobStream struct {
	drpc.Stream
}

func (x *drpcProvisionerDaemon_CancelJobStream) SendAndClose(m *Empty) error {
	if err := x.MsgSend(m, drpcEncoding_File_provisionerd_proto_provisionerd_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCProvisionerDaemon_CompleteJobStream interface {
	drpc.Stream
	SendAndClose(*Empty) error
}

type drpcProvisionerDaemon_CompleteJobStream struct {
	drpc.Stream
}

func (x *drpcProvisionerDaemon_CompleteJobStream) SendAndClose(m *Empty) error {
	if err := x.MsgSend(m, drpcEncoding_File_provisionerd_proto_provisionerd_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
