syntax = "proto3";
option go_package = "github.com/coder/coder/v2/agent/agentsocket/proto";

package coder.agentsocket.v1;

import "google/protobuf/timestamp.proto";

message PingRequest {}

message PingResponse {
	string message = 1;
	google.protobuf.Timestamp timestamp = 2;
}

message SyncStartRequest {
	string unit = 1;
}

message SyncStartResponse {
	bool success = 1;
	string message = 2;
}

message SyncWantRequest {
	string unit = 1;
	string depends_on = 2;
}

message SyncWantResponse {
	bool success = 1;
	string message = 2;
}

message SyncCompleteRequest {
	string unit = 1;
}

message SyncCompleteResponse {
	bool success = 1;
	string message = 2;
}

message SyncWaitRequest {
	string unit = 1;
}

message SyncWaitResponse {
	bool success = 1;
	string message = 2;
}

message SyncStatusRequest {
	string unit = 1;
	bool recursive = 2;
}

message DependencyInfo {
	string depends_on = 1;
	string required_status = 2;
	string current_status = 3;
	bool is_satisfied = 4;
}

message SyncStatusResponse {
	bool success = 1;
	string message = 2;
	string unit = 3;
	string status = 4;
	bool is_ready = 5;
	repeated DependencyInfo dependencies = 6;
	string dot = 7;
}

// AgentSocket provides direct access to the agent over local IPC.
service AgentSocket {
	rpc Ping(PingRequest) returns (PingResponse);
	rpc SyncStart(SyncStartRequest) returns (SyncStartResponse);
	rpc SyncWant(SyncWantRequest) returns (SyncWantResponse);
	rpc SyncComplete(SyncCompleteRequest) returns (SyncCompleteResponse);
	rpc SyncWait(SyncWaitRequest) returns (SyncWaitResponse);
	rpc SyncStatus(SyncStatusRequest) returns (SyncStatusResponse);
}
