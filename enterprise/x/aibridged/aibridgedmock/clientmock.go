// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coder/coder/v2/enterprise/x/aibridged (interfaces: DRPCClient)
//
// Generated by this command:
//
//	mockgen -destination ./clientmock.go -package aibridgedmock github.com/coder/coder/v2/enterprise/x/aibridged DRPCClient
//

// Package aibridgedmock is a generated GoMock package.
package aibridgedmock

import (
	context "context"
	reflect "reflect"

	proto "github.com/coder/coder/v2/enterprise/x/aibridged/proto"
	gomock "go.uber.org/mock/gomock"
	drpc "storj.io/drpc"
)

// MockDRPCClient is a mock of DRPCClient interface.
type MockDRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockDRPCClientMockRecorder
	isgomock struct{}
}

// MockDRPCClientMockRecorder is the mock recorder for MockDRPCClient.
type MockDRPCClientMockRecorder struct {
	mock *MockDRPCClient
}

// NewMockDRPCClient creates a new mock instance.
func NewMockDRPCClient(ctrl *gomock.Controller) *MockDRPCClient {
	mock := &MockDRPCClient{ctrl: ctrl}
	mock.recorder = &MockDRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDRPCClient) EXPECT() *MockDRPCClientMockRecorder {
	return m.recorder
}

// DRPCConn mocks base method.
func (m *MockDRPCClient) DRPCConn() drpc.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DRPCConn")
	ret0, _ := ret[0].(drpc.Conn)
	return ret0
}

// DRPCConn indicates an expected call of DRPCConn.
func (mr *MockDRPCClientMockRecorder) DRPCConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DRPCConn", reflect.TypeOf((*MockDRPCClient)(nil).DRPCConn))
}

// GetMCPServerAccessTokensBatch mocks base method.
func (m *MockDRPCClient) GetMCPServerAccessTokensBatch(ctx context.Context, in *proto.GetMCPServerAccessTokensBatchRequest) (*proto.GetMCPServerAccessTokensBatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMCPServerAccessTokensBatch", ctx, in)
	ret0, _ := ret[0].(*proto.GetMCPServerAccessTokensBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMCPServerAccessTokensBatch indicates an expected call of GetMCPServerAccessTokensBatch.
func (mr *MockDRPCClientMockRecorder) GetMCPServerAccessTokensBatch(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMCPServerAccessTokensBatch", reflect.TypeOf((*MockDRPCClient)(nil).GetMCPServerAccessTokensBatch), ctx, in)
}

// GetMCPServerConfigs mocks base method.
func (m *MockDRPCClient) GetMCPServerConfigs(ctx context.Context, in *proto.GetMCPServerConfigsRequest) (*proto.GetMCPServerConfigsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMCPServerConfigs", ctx, in)
	ret0, _ := ret[0].(*proto.GetMCPServerConfigsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMCPServerConfigs indicates an expected call of GetMCPServerConfigs.
func (mr *MockDRPCClientMockRecorder) GetMCPServerConfigs(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMCPServerConfigs", reflect.TypeOf((*MockDRPCClient)(nil).GetMCPServerConfigs), ctx, in)
}

// IsAuthorized mocks base method.
func (m *MockDRPCClient) IsAuthorized(ctx context.Context, in *proto.IsAuthorizedRequest) (*proto.IsAuthorizedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized", ctx, in)
	ret0, _ := ret[0].(*proto.IsAuthorizedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *MockDRPCClientMockRecorder) IsAuthorized(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*MockDRPCClient)(nil).IsAuthorized), ctx, in)
}

// RecordInterception mocks base method.
func (m *MockDRPCClient) RecordInterception(ctx context.Context, in *proto.RecordInterceptionRequest) (*proto.RecordInterceptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordInterception", ctx, in)
	ret0, _ := ret[0].(*proto.RecordInterceptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordInterception indicates an expected call of RecordInterception.
func (mr *MockDRPCClientMockRecorder) RecordInterception(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordInterception", reflect.TypeOf((*MockDRPCClient)(nil).RecordInterception), ctx, in)
}

// RecordPromptUsage mocks base method.
func (m *MockDRPCClient) RecordPromptUsage(ctx context.Context, in *proto.RecordPromptUsageRequest) (*proto.RecordPromptUsageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordPromptUsage", ctx, in)
	ret0, _ := ret[0].(*proto.RecordPromptUsageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordPromptUsage indicates an expected call of RecordPromptUsage.
func (mr *MockDRPCClientMockRecorder) RecordPromptUsage(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordPromptUsage", reflect.TypeOf((*MockDRPCClient)(nil).RecordPromptUsage), ctx, in)
}

// RecordTokenUsage mocks base method.
func (m *MockDRPCClient) RecordTokenUsage(ctx context.Context, in *proto.RecordTokenUsageRequest) (*proto.RecordTokenUsageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordTokenUsage", ctx, in)
	ret0, _ := ret[0].(*proto.RecordTokenUsageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordTokenUsage indicates an expected call of RecordTokenUsage.
func (mr *MockDRPCClientMockRecorder) RecordTokenUsage(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTokenUsage", reflect.TypeOf((*MockDRPCClient)(nil).RecordTokenUsage), ctx, in)
}

// RecordToolUsage mocks base method.
func (m *MockDRPCClient) RecordToolUsage(ctx context.Context, in *proto.RecordToolUsageRequest) (*proto.RecordToolUsageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordToolUsage", ctx, in)
	ret0, _ := ret[0].(*proto.RecordToolUsageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordToolUsage indicates an expected call of RecordToolUsage.
func (mr *MockDRPCClientMockRecorder) RecordToolUsage(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordToolUsage", reflect.TypeOf((*MockDRPCClient)(nil).RecordToolUsage), ctx, in)
}
