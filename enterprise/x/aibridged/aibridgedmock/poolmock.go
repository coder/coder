// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coder/coder/v2/enterprise/x/aibridged (interfaces: Pooler)
//
// Generated by this command:
//
//	mockgen -destination ./poolmock.go -package aibridgedmock github.com/coder/coder/v2/enterprise/x/aibridged Pooler
//

// Package aibridgedmock is a generated GoMock package.
package aibridgedmock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	aibridged "github.com/coder/coder/v2/enterprise/x/aibridged"
	gomock "go.uber.org/mock/gomock"
)

// MockPooler is a mock of Pooler interface.
type MockPooler struct {
	ctrl     *gomock.Controller
	recorder *MockPoolerMockRecorder
	isgomock struct{}
}

// MockPoolerMockRecorder is the mock recorder for MockPooler.
type MockPoolerMockRecorder struct {
	mock *MockPooler
}

// NewMockPooler creates a new mock instance.
func NewMockPooler(ctrl *gomock.Controller) *MockPooler {
	mock := &MockPooler{ctrl: ctrl}
	mock.recorder = &MockPoolerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPooler) EXPECT() *MockPoolerMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockPooler) Acquire(ctx context.Context, req aibridged.Request, clientFn aibridged.ClientFunc, mcpBootstrapper aibridged.MCPProxyBuilder) (http.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", ctx, req, clientFn, mcpBootstrapper)
	ret0, _ := ret[0].(http.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockPoolerMockRecorder) Acquire(ctx, req, clientFn, mcpBootstrapper any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockPooler)(nil).Acquire), ctx, req, clientFn, mcpBootstrapper)
}

// Shutdown mocks base method.
func (m *MockPooler) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockPoolerMockRecorder) Shutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockPooler)(nil).Shutdown), ctx)
}
