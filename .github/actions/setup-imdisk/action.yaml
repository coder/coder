name: "Setup OSFMount"
if: runner.os == 'Windows'
description: |
  Installs OSFmount for Windows and creates a RAM disk on drive R:.
runs:
  using: "composite"
  steps:
    - name: Install OSFMount
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"

        $path = "$($env:TEMP)\osfmount.exe"
        & curl.exe `
          --progress-bar `
          --show-error `
          --fail `
          --location `
          --output $path `
          $env:OSFMOUNT_URL
        if ($LASTEXITCODE -ne 0) { throw "Failed to download osfmount.exe" }
        if ((Get-FileHash $path -Algorithm SHA256).Hash -ne $env:OSFMOUNT_SHA256) {
          throw "Failed to verify osfmount.exe"
        }

        # We can't just use -Wait here or it will block when the installer
        # launches the GUI afterwards, and there's no way to turn that off.
        $proc = Start-Process -FilePath $path -ArgumentList "/silent /norestart" -PassThru
        $proc.WaitForExit()
        if ($proc.ExitCode -ne 0) { throw "Failed to install osfmount.exe" }

        # Close the GUI and delete the installer.
        Get-Process -Name "OSFMount" -ErrorAction SilentlyContinue | Stop-Process -Force
        Remove-Item $path
      env:
        OSFMOUNT_URL: https://storage.googleapis.com/coder-osfmount-binaries/osfmount-v3.1.1003.exe
        OSFMOUNT_SHA256: 9fe0738b7c2d29a7414e67f53aea359f3801d1c37b44f1b4fed5d02cb7536369

    - name: Create RAM Disk
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"

        # List disks before creating the RAM disk.
        $before = Get-Disk

        # Create the uninitialized disk.
        & "C:\Program Files\OSFmount\OSFMount.com" -a -t vm -s 48G -o physical
        if ($LASTEXITCODE -ne 0) { throw "Failed to create RAM disk" }

        # List disks after creating the RAM disk and find the new one.
        $after = Get-Disk
        $newDisk = ($after | Where-Object { $before.Number -notcontains $_.Number })
        if (!$newDisk) { throw "Failed to find new RAM disk" }

        # Initialize the disk, create a simple volume and format it NTFS.
        Initialize-Disk -Number $newDisk.Number -PartitionStyle GPT -Confirm:$false
        $partition = New-Partition -DiskNumber $newDisk.Number -UseMaximumSize -DriveLetter R
        Format-Volume -Partition $partition -FileSystem NTFS -NewFileSystemLabel "RAMDisk" -Confirm:$false
