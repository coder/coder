name: "Setup Test Cache"
description: |
  Downloads the test cache and, if needed, uploads a new cache after the job is complete.
  A PR job can use a cache if it was created by its base branch, its current
  branch, or the default branch.
  https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows#restrictions-for-accessing-a-cache
inputs:
  key-prefix:
    description: "Prefix for the cache key"
    required: true
  cache-path:
    description: "Path to the cache directory"
    required: true
    # This path is defined in testutil/cache.go
    default: "~/.cache/coderv2-test"
runs:
  using: "composite"
  steps:
    - name: Get date values
      id: dates
      shell: bash
      run: |
        echo "year-month=$(date +'%Y-%m')" >> $GITHUB_OUTPUT
        echo "prev-year-month=$(date -d 'last month' +'%Y-%m')" >> $GITHUB_OUTPUT
        echo "day=$(date +'%d')" >> $GITHUB_OUTPUT

    # Using this particular key/restore-keys combination ensures that:
    # 1. The cache is updated at most once a day for a given key prefix.
    # 2. The cache is reset once a month for a given key prefix.
    #
    # TODO: As a cost optimization, we could remove caches that are older than
    # a day or two. By default, depot keeps caches for 14 days, which isn't
    # necessary for the test cache.
    # https://depot.dev/docs/github-actions/overview#cache-retention-policy
    - name: Download and optionally upload test cache
      # This is a fork of actions/cache that only saves the cache if the current
      # job is running on the main branch.
      # Without it, PRs would create one-use caches that would linger until
      # expiration and we'd be charged for them. I evaluated a couple of options
      # for limiting the cache to the main branch, and forking was the simplest.
      uses: coder/actions-cache@3857e1bfd93dc0ee8d12968ce41da6dbb749bad7
      with:
        path: ${{ inputs.cache-path }}
        # The key doesn't need to include an OS name. The action already takes
        # that into account: https://github.com/actions/cache/tree/5a3ec84eff668545956fd18022155c47e93e2684?tab=readme-ov-file#cache-version
        # Cache entries are immutable. If an entry under the key already exists,
        # it will not be overwritten.
        key: ${{ inputs.key-prefix }}-${{ steps.dates.outputs.year-month }}-${{ steps.dates.outputs.day }}
        # > If there are multiple partial matches for a restore key, the action returns the most recently created cache.
        # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
        # The second restore key allows non-main branches to use the cache from the previous month.
        # This prevents PRs from rebuilding the cache on the first day of the month.
        restore-keys: |
          ${{ inputs.key-prefix }}-${{ steps.dates.outputs.year-month }}-
          ${{ github.ref != 'refs/heads/main' && format('{0}-{1}-', inputs.key-prefix, steps.dates.outputs.prev-year-month) || '' }}
