name: AI Triage Automation

on:
  issues:
    types:
      - labeled
  workflow_dispatch:
    inputs:
      issue_url:
        description: "GitHub Issue URL to process"
        required: true
        type: string
      template_name:
        description: "Coder template to use for workspace"
        required: true
        default: "traiage"
        type: string
      template_preset:
        description: "Template preset to use"
        required: true
        default: "Default"
        type: string
      prefix:
        description: "Prefix for workspace name"
        required: false
        default: "traiage"
        type: string

jobs:
  traiage:
    name: Triage GitHub Issue with Claude Code
    runs-on: ubuntu-latest
    if: github.event.label.name == 'traiage' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 30
    env:
      CODER_URL: ${{ secrets.TRAIAGE_CODER_URL }}
      CODER_SESSION_TOKEN: ${{ secrets.TRAIAGE_CODER_SESSION_TOKEN }}
    permissions:
      contents: read
      issues: write
      actions: write

    steps:
      - name: Determine Inputs
        id: determine-inputs
        env:
          GITHUB_EVENT_ISSUE_HTML_URL: ${{ github.event.issue.html_url }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          INPUTS_ISSUE_URL: ${{ inputs.issue_url }}
          INPUTS_TEMPLATE_NAME: ${{ inputs.template_name || 'traiage' }}
          INPUTS_TEMPLATE_PRESET: ${{ inputs.template_preset || 'Default'}}
          INPUTS_PREFIX: ${{ inputs.prefix || 'traiage' }}
        run: |
          echo "template_name=${INPUTS_TEMPLATE_NAME}" >> "${GITHUB_OUTPUT}"
          echo "template_preset=${INPUTS_TEMPLATE_PRESET}" >> "${GITHUB_OUTPUT}"
          echo "prefix=${INPUTS_PREFIX}" >> "${GITHUB_OUTPUT}"

          # Determine issue URL based on event type
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            echo "issue_url=${INPUTS_ISSUE_URL}" >> "${GITHUB_OUTPUT}"
          elif [[ "${GITHUB_EVENT_NAME}" == "issues" ]]; then
            echo "issue_url=${GITHUB_EVENT_ISSUE_HTML_URL}" >> "${GITHUB_OUTPUT}"
          else
            echo "::error::Unsupported event type: ${GITHUB_EVENT_NAME}"
            exit 1
          fi

      - name: Verify push access
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_EVENT_USER_LOGIN: ${{ github.event.sender.login }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GH_TOKEN: ${{ github.token }}
        run: |
          # Determine username based on event type
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            USERNAME="${GITHUB_ACTOR}"
          else
            USERNAME="${GITHUB_EVENT_USER_LOGIN}"
          fi

          # Query the user's permission on this repo
          can_push="$(gh api "/repos/${GITHUB_REPOSITORY}/collaborators/${USERNAME}/permission" --jq '.user.permissions.push')"
          if [[ "${can_push}" != "true" ]]; then
            echo "::error title=Access Denied::${USERNAME} does not have push access to ${GITHUB_REPOSITORY}"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Fetch issue description
        id: fetch-issue
        env:
          ISSUE_URL: ${{ steps.determine-inputs.outputs.issue_url }}
          GH_TOKEN: ${{ github.token }}
        run: |
          # Fetch issue description using `gh` CLI
          #shellcheck disable=SC2016 # The template string should not be subject to shell expansion
          issue_description=$(gh issue view "${ISSUE_URL}" \
            --json 'title,body,comments' \
            --template '{{printf "%s\n\n%s\n\nComments:\n" .title .body}}{{range $k, $v := .comments}}  - {{index $v.author "login"}}: {{printf "%s\n" $v.body}}{{end}}')

          # Create prompt for the task
          {
            echo "prompt<<EOF"
            cat <<PROMPT
          Fix ${ISSUE_URL}

          Analyze the below GitHub issue description, understand the root cause, and make appropriate changes to resolve the issue.
          ---
          ${issue_description}
          PROMPT
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: Create Coder Task
        uses: ./.github/actions/coder-task
        with:
          coder-url: ${{ secrets.TRAIAGE_CODER_URL }}
          coder-token: ${{ secrets.TRAIAGE_CODER_SESSION_TOKEN }}
          template-name: ${{ steps.determine-inputs.outputs.template_name }}
          template-preset: ${{ steps.determine-inputs.outputs.template_preset }}
          task-name-prefix: ${{ steps.determine-inputs.outputs.prefix }}
          task-prompt: ${{ steps.fetch-issue.outputs.prompt }}
          issue-url: ${{ steps.determine-inputs.outputs.issue_url }}
          coder-web-url: "https://dev.coder.com"
          github-token: ${{ github.token }}
