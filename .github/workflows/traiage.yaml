name: AI Triage Automation

on:
  workflow_dispatch:
    inputs:
      issue_url:
        description: 'GitHub Issue URL to process'
        required: true
        type: string
      context_key:
        description: 'Unique context key (defaults to issue number)'
        required: true
        type: string
      template_name:
        description: 'Coder template to use for workspace'
        required: true
        default: 'ai-workspace'
        type: string


jobs:
  triage:
    name: Triage GitHub Issue with Claude Code
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      CODER_URL: ${{ secrets.CODER_URL }}
      CODER_SESSION_TOKEN: ${{ secrets.CODER_SESSION_TOKEN }}
      TEMPLATE_NAME: ${{ inputs.template_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # NOTE: Only required for local testing via nektos/act
      # - name: Install gh CLI
        # run: |
          # sudo apt-get update -y && \
          # sudo apt-get install -y gh && \
          # gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      - name: Download and install Coder binary
        shell: bash
        env:
          CODER_URL: ${{ secrets.CODER_URL }}
        run: |
          if [ "${{ runner.arch }}" == "ARM64" ]; then
            ARCH="arm64"
          else
            ARCH="amd64"
          fi
          mkdir -p "$HOME"/.local/bin
          curl -fsSL --compressed "$CODER_URL"/bin/coder-linux-${ARCH} -o "$HOME"/.local/bin/coder
          chmod +x "$HOME"/.local/bin/coder
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          "$HOME"/.local/bin/coder version
          "$HOME"/.local/bin/coder whoami

      - name: Create Coder workspace
        id: create-workspace
        run: |
          export WORKSPACE_NAME="gh-issue-${{ inputs.context_key }}-${{ github.run_id }}"
          echo "Creating workspace: $WORKSPACE_NAME"
          ./scripts/traiage.sh create
          echo "workspace_created=true" >> $GITHUB_OUTPUT
          echo "workspace_name=$WORKSPACE_NAME" >> $GITHUB_OUTPUT
          echo "WORKSPACE_NAME=${WORKSPACE_NAME}" >> $GITHUB_ENV

      - name: Send prompt to AI agent inside workspace
        id: prepare-prompt
        run: |
          PROMPT_FILE=/tmp/prompt.txt
          trap 'rm -f ${PROMPT_FILE}' EXIT

          # Extract issue content and prepare prompt
          issue_url="${{ inputs.issue_url }}"
          context_key="${{ steps.extract-context.outputs.context_key }}"

          # Fetch issue description using `gh` CLI
          issue_description=$(gh issue view "$issue_url")

          # Write a prompt to PROMPT_FILE
          cat > "${PROMPT_FILE}" <<EOF
            Analyze the below GitHub issue description, understand the root cause, and make appropriate changes to resolve the issue.

            ISSUE URL: ${issue_url}
            ISSUE DESCRIPTION BELOW:

            ${issue_description}
          EOF

          echo "WORKSPACE_NAME: ${WORKSPACE_NAME}"
          PROMPT=$(cat $PROMPT_FILE) ./scripts/traiage.sh prompt

      - name: Create and upload archive
        id: create-archive
        run: |
          echo "Creating archive for workspace: $WORKSPACE_NAME"
          archive_url=$(./scripts/traiage.sh archive)
          echo "archive_url=${archive_url}" >> $GITHUB_OUTPUT

      - name: Report results
        run: |
          echo "## AI Triage Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Issue URL:** ${{ inputs.issue_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Context Key:** ${{ steps.extract-context.outputs.context_key }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workspace:** ${{ steps.extract-context.outputs.workspace_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Archive URL:** ${{ steps.create-archive.outputs.archive_url }}" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup workspace
        if: always() && steps.create-workspace.outputs.workspace_created == 'true'
        run: |
          echo "Cleaning up workspace: $WORKSPACE_NAME"
          ./scripts/traiage.sh delete || true
