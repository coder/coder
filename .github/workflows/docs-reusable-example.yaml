name: Documentation Reusable Workflow Example
on:
  # This is an example workflow - it's only triggered manually via workflow_dispatch
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # This job shows how to use the unified docs validation workflow
  # All checks run concurrently inside the workflow
  docs-validation:
    name: Validate Documentation Using Reusable Workflow
    uses: ./.github/workflows/docs-unified.yaml
    permissions:
      contents: read
      pull-requests: write
    # Define which checks to run
    with:
      lint-markdown: true
      check-format: true
      check-links: true
      check-cross-references: true
      lint-vale: true
      generate-preview: true
      post-comment: true
      fail-on-error: false # Set to false to show all issues in one run

  # This job shows how to call the docs-shared composite action directly
  # This is an alternative to using the reusable workflow
  # The action is optimized internally to run validation steps concurrently
  manual-docs-check:
    name: Manual Documentation Validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      # === PHASE 1: SETUP AND CHECKOUT ===
      # Use the reusable setup action for efficient environment setup
      - name: Setup Documentation Environment
        uses: ./.github/docs/actions/docs-setup
        with:
          setup-vale: true

      # === PHASE 2: PR INFORMATION ===
      - name: Get PR Information
        id: pr_info
        run: |
          set -euo pipefail
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_ENV
          echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # === PHASE 3: VALIDATION (CONCURRENT) ===
      # The docs-shared action performs all validation steps in parallel
      # where possible based on its own internal phases
      - name: Process Documentation Manually
        id: docs-shared
        uses: ./.github/docs/actions/docs-shared
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          docs-dir: docs
          include-md-files: "true"
          check-links: "true"
          lint-markdown: "true"
          check-format: "true"
          check-cross-references: "true"
          lint-vale: "true"
          generate-preview: "true"
          post-comment: "true"
          pr-number: "${{ env.PR_NUMBER }}"
          fail-on-error: "false"

      # === PHASE 4: RESULTS SUMMARY ===
      - name: Validation Results Summary
        if: always()
        run: |
          echo "==================================================="
          echo "üìä DOCUMENTATION VALIDATION RESULTS SUMMARY üìä"
          echo "==================================================="
          
          # Check if any docs were processed
          if [ "${{ steps.docs-shared.outputs.has_changes }}" != "true" ]; then
            echo "‚úÖ No documentation changes found to validate"
            exit 0
          fi
          
          # Display the unified badge
          echo "${{ steps.docs-shared.outputs.results_badge }}"
          echo ""
          
          echo "üîé File Analysis Results:"
          echo "  - Changed Files: $(echo '${{ steps.docs-shared.outputs.changed_files }}' | jq '. | length') files"
          echo "  - Manifest Changed: ${{ steps.docs-shared.outputs.manifest_changed }}"
          echo "  - New Docs Added: ${{ steps.docs-shared.outputs.has_new_docs }}"
          
          echo ""
          echo "üìã Validation Results Breakdown:"
          
          # Parse the JSON results and display them in a formatted way
          RESULTS='${{ steps.docs-shared.outputs.validation_results }}'
          
          if [ "$RESULTS" != "[]" ]; then
            # Show passed/failed status for each validation type
            echo "$RESULTS" | jq -r '.[] | "  " + (if .status == "success" then "‚úÖ" else "‚ùå" end) + " " + .name + ": " + (if .status == "success" then "Passed" else "Failed" end)'
            
            # Show failing check details with guidance
            echo ""
            echo "üîß How to Fix Issues:"
            FAILURES=$(echo "$RESULTS" | jq -r '.[] | select(.status == "failure")')
            
            if [ -n "$FAILURES" ]; then
              echo "$FAILURES" | jq -r 'if .fix_command != "" then "  - " + .name + ": Run `" + .fix_command + "`" else "  - " + .name + ": " + .guidance end'
            else
              echo "  No issues to fix! üéâ"
            fi
          else
            echo "  No validation results available"
          fi
          
          echo ""
          echo "üìà Summary Statistics:"
          echo "  - Total checks: ${{ steps.docs-shared.outputs.validation_count }}"
          echo "  - Passing: ${{ steps.docs-shared.outputs.passing_count }}"
          echo "  - Success rate: ${{ steps.docs-shared.outputs.success_percentage }}%"
          
          echo ""
          echo "üåê Preview Information:"
          if [ "${{ steps.docs-shared.outputs.preview_url }}" != "" ]; then
            echo "  üîó Preview URL: ${{ steps.docs-shared.outputs.preview_url }}"
          else
            echo "  ‚ö†Ô∏è No preview URL generated"
          fi
          
          echo ""
          echo "üì± Unified Reporting:"
          echo "  All validation results are now aggregated into a single JSON structure"
          echo "  This enables:"
          echo "  - Consistent reporting across different environments"
          echo "  - Easy integration with other tools through the JSON output"
          echo "  - Better error handling and aggregation"
          echo "  - Progress tracking across multiple validation types"