# .github/workflows/deploy.yml
name: Deploy PR
on:
  deployment:
  # pull_request:
  #   types: [opened, synchronize, ready_for_review]
  workflow_dispatch:
  # push:
  #   branches-ignore: main
  issue_comment:
    types: [created, edited]

env:
  # This is the version of the release. It is used to tag the Docker images.
  CODER_BASE_IMAGE_TAG: ghcr.io/coder/coder-preview-base:pr${{ github.event.pull_request.number }}
  CODER_IMAGE_TAG: ghcr.io/coder/coder-preview:pr${{ github.event.pull_request.number }}
  PR_NUMBER: ${{ github.event.pull_request.number }}
  REPO: ghcr.io/coder/coder-preview

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  pr_commented:
    if: ${{ github.event.issue.pull_request }} && contains(github.event.comment.body, '/review-pr')
    runs-on: "ubuntu-latest"
    steps:
      - name: Get PR number
        id: pr_number
        run: echo "::set-output name=number::$(echo ${{ github.event.comment.body }} | grep -oP '(?<=/review-pr ).*')"
      # Comment on the PR
      - name: Create PR comment
        run: |
          set -euxo pipefail
          curl -sSL -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"body": "Deploying PR ${{ steps.pr_number.outputs.number }}"}' \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"

  build:
    needs: pr_commented
    runs-on: ${{ github.repository_owner == 'coder' && 'buildjet-8vcpu-ubuntu-2204' || 'ubuntu-latest' }}
    env:
      # Necessary for Docker manifest
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: ./.github/actions/setup-go

      - uses: ./.github/actions/setup-node

      - name: Install sqlc
        run: |
          curl -sSL https://github.com/kyleconroy/sqlc/releases/download/v1.18.0/sqlc_1.18.0_linux_amd64.tar.gz | sudo tar -C /usr/bin -xz sqlc

      - name: GHCR Login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create empty base-build-context directory
        run: mkdir base-build-context

      - name: Build and push base Docker image
        uses: docker/build-push-action@v4
        with:
          context: base-build-context
          file: scripts/Dockerfile.base
          platforms: linux/amd64
          push: true
          tags: ${{ env.CODER_BASE_IMAGE_TAG }}

      - name: Build and push Linux amd64 Docker image
        run: |
          set -euxo pipefail
          go mod download
          make gen/mark-fresh
          make -j build/coder_linux_amd64
          ./scripts/build_docker.sh --arch amd64 --target ${{env.CODER_IMAGE_TAG }} --push build/coder_*_linux_amd64
        #
        env:
          CODER_BASE_IMAGE_TAG: ${{ env.CODER_BASE_IMAGE_TAG }}

  deployment:
    needs: build
    if: needs.build.result == 'success'
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3

      - name: "Set up kubeconfig"
        run: |
          set -euxo pipefail
          mkdir -p ~/.kube
          echo "${{ secrets.DELIVERYBOT_KUBECONFIG }}" > ~/.kube/config
          export KUBECONFIG=~/.kube/config

      - name: "Create PR namespace"
        run: |
          set -euxo pipefail
          kubectl create namespace "pr${{ env.PR_NUMBER }}"

      - name: Install Helm
        uses: azure/setup-helm@v1

      - name: "Deploy"
        run: |
          helm install pr${{ env.PR_NUMBER }}  ./helm --namespace "pr${{ env.PR_NUMBER }}" --set coder.image.repo=${{ env.REPO}} --set coder.image.tag=${{ env.PR_NUMBER }} --wait

      - name: Comment on PR
        run: |
          set -euxo pipefail
          curl -sSL -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"body": "Deployed PR ${{ env.PR_NUMBER }} successfully"}' \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"

      # - name: "Deploy"
      #   uses: "deliverybot/helm@v1"
      #   with:
      #     release: "pr${{ env.PR_NUMBER }}"
      #     namespace: "pr${{ env.PR_NUMBER  }}"
      #     version: "{{ github.sha }}"
      #     chart: "./helm"
      #     token: "${{ secrets.GITHUB_TOKEN }}"
      #     values: |
      #       name: foobar
      #   env:
      #     KUBECONFIG_FILE: "${{ secrets.DELIVERYBOT_KUBECONFIG }}"
