name: Docs Unified Checks
on:
  workflow_call:
    inputs:
      lint-markdown:
        description: 'Whether to lint markdown files with markdownlint-cli2'
        required: false
        type: boolean
        default: true
      check-format:
        description: 'Whether to check (but not format) markdown table formatting'
        required: false
        type: boolean
        default: true
      check-links:
        description: 'Whether to check links in markdown files'
        required: false 
        type: boolean
        default: true
      check-cross-references:
        description: 'Whether to check for broken cross-references when files or headings change'
        required: false
        type: boolean
        default: true
      lint-vale:
        description: 'Whether to run Vale style checks on documentation'
        required: false
        type: boolean
        default: true
      generate-preview:
        description: 'Whether to generate preview links'
        required: false
        type: boolean
        default: true
      post-comment:
        description: 'Whether to post a PR comment with results'
        required: false
        type: boolean
        default: true
      fail-on-error:
        description: 'Whether to fail the workflow on errors'
        required: false
        type: boolean
        default: false

jobs:
  docs-check:
    name: Documentation Validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write # needed for commenting on PRs
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      # Phase 1: Setup and Initial Checkout
      - name: Setup Environment
        uses: ./.github/docs/actions/docs-setup
        with:
          setup-vale: ${{ inputs.lint-vale }}

      # Phase 2: Prepare PR Information
      - name: Get PR info
        id: pr_info
        run: |
          set -euo pipefail
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_ENV
          echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Phase 3: Process Documentation
      # The docs-shared action is now phase-based internally
      # and will execute appropriate validation steps concurrently
      - name: Process Documentation
        id: docs-shared
        uses: ./.github/docs/actions/docs-shared
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          docs-dir: docs
          include-md-files: "true"
          check-links: ${{ inputs.check-links }}
          lint-markdown: ${{ inputs.lint-markdown }}
          check-format: ${{ inputs.check-format }}
          check-cross-references: ${{ inputs.check-cross-references }}
          lint-vale: ${{ inputs.lint-vale }}
          generate-preview: ${{ inputs.generate-preview }}
          post-comment: ${{ inputs.post-comment }}
          pr-number: "${{ env.PR_NUMBER }}"
          fail-on-error: ${{ inputs.fail-on-error }}

      # Phase 4: Results Summary
      - name: Validation Results Summary
        if: always()
        run: |
          echo "==============================================="
          echo "📊 DOCUMENTATION VALIDATION RESULTS SUMMARY 📊"
          echo "==============================================="
          
          # Check if any docs were processed
          if [ "${{ steps.docs-shared.outputs.has_changes }}" != "true" ]; then
            echo "✅ No documentation changes found to validate"
            exit 0
          fi
          
          # Display the unified badge
          echo "${{ steps.docs-shared.outputs.results_badge }}"
          echo ""
          
          echo "🔎 Changed Files: $(echo '${{ steps.docs-shared.outputs.changed_files }}' | jq '. | length') files"
          
          # Extract and display the aggregated results
          echo ""
          echo "📋 Validation Results Breakdown:"
          
          # Parse the JSON results and display them
          RESULTS='${{ steps.docs-shared.outputs.validation_results }}'
          
          if [ "$RESULTS" != "[]" ]; then
            echo "$RESULTS" | jq -r '.[] | "  " + (if .status == "success" then "✅" elif .status == "warning" then "⚠️" else "❌" end) + " " + .name + ": " + (if .status == "success" then "Passed" elif .status == "warning" then "Warning" else "Failed" end)'
          
            # Show failing check details
            echo ""
            echo "🔧 How to fix issues:"
            FAILURES=$(echo "$RESULTS" | jq -r '.[] | select(.status != "success")')
            
            if [ -n "$FAILURES" ]; then
              echo "$FAILURES" | jq -r 'if has("fix_command") and .fix_command != "" then "  - " + .name + ": Run `" + .fix_command + "`" else "  - " + .name + ": " + .guidance end'
            else
              echo "  No issues to fix! 🎉"
            fi
          else
            echo "  No validation results available"
          fi
          
          echo ""
          echo "📈 Summary Statistics:"
          echo "  - Total checks: ${{ steps.docs-shared.outputs.validation_count }}"
          echo "  - Passing: ${{ steps.docs-shared.outputs.passing_count }}"
          echo "  - Success rate: ${{ steps.docs-shared.outputs.success_percentage }}%"
          
          # New Docs Information
          if [ "${{ steps.docs-shared.outputs.has_new_docs }}" == "true" ]; then
            echo ""
            echo "🆕 New Documentation Added"
            if [ "${{ steps.docs-shared.outputs.preview_url }}" != "" ]; then
              echo "🔗 Preview URL: ${{ steps.docs-shared.outputs.preview_url }}"
            fi
          fi