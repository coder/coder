syntax = "proto3";
option go_package = "github.com/coder/coder/v2/aibridged/proto";

package proto;

import "google/protobuf/any.proto";

message RecordSessionRequest {
  string session_id = 1; // UUID.
  string initiator_id = 2; // UUID.
  string provider = 3;
  string model = 4;
}

message RecordSessionResponse {}

message RecordTokenUsageRequest {
  string session_id = 1; // UUID.
  string msg_id = 2; // ID provided by provider.
  int64 input_tokens = 3;
  int64 output_tokens = 4;
  map<string, google.protobuf.Any> metadata = 5;
}
message RecordTokenUsageResponse {}

message RecordPromptUsageRequest {
  string session_id = 1; // UUID.
  string msg_id = 2; // ID provided by provider.
  string prompt = 3;
  map<string, google.protobuf.Any> metadata = 4;
}
message RecordPromptUsageResponse {}

message RecordToolUsageRequest {
  string session_id = 1; // UUID.
  string msg_id = 2; // ID provided by provider.
  string tool = 3;
  string input = 4;
  bool injected = 5;
  map<string, google.protobuf.Any> metadata = 6;
}
message RecordToolUsageResponse {}

// Recorder is responsible for persisting AI usage records along with their concomitant session.
service Recorder {
  // RecordSession creates a new session to which all other sub-resources (token, prompt, tool uses)
  // will be related.
  rpc RecordSession(RecordSessionRequest) returns (RecordSessionResponse);
  rpc RecordTokenUsage(RecordTokenUsageRequest) returns (RecordTokenUsageResponse);
  rpc RecordPromptUsage(RecordPromptUsageRequest) returns (RecordPromptUsageResponse);
  rpc RecordToolUsage(RecordToolUsageRequest) returns (RecordToolUsageResponse);
}

message RetrieveMCPServerConfigsRequest {
  string user_id = 1; // UUID.
}

message RetrieveMCPServerConfigsResponse {
  MCPServerConfig coderMCPConfig = 1;
  repeated MCPServerConfig externalAuthMCPConfigs = 2;
}

message MCPServerConfig {
  string name = 1;
  string url = 2;
  string access_token = 3;
}

// MCPConfigurator is responsible for retrieving any relevant data required for configuring MCP clients
// against remote servers.
service MCPConfigurator {
  // RetrieveMCPServerConfigs will retrieve MCP server configurations. This may involve validating or
  // refreshing existing access tokens synchronously.
  rpc RetrieveMCPServerConfigs(RetrieveMCPServerConfigsRequest) returns (RetrieveMCPServerConfigsResponse);
}
