// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.34
// source: aibridged/proto/aibridged.proto

package proto

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_aibridged_proto_aibridged_proto struct{}

func (drpcEncoding_File_aibridged_proto_aibridged_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_aibridged_proto_aibridged_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_aibridged_proto_aibridged_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_aibridged_proto_aibridged_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_aibridged_proto_aibridged_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCAIBridgeDaemonClient interface {
	DRPCConn() drpc.Conn

	StartSession(ctx context.Context, in *StartSessionRequest) (*StartSessionResponse, error)
	TrackTokenUsage(ctx context.Context, in *TrackTokenUsageRequest) (*TrackTokenUsageResponse, error)
	TrackUserPrompt(ctx context.Context, in *TrackUserPromptRequest) (*TrackUserPromptResponse, error)
	TrackToolUsage(ctx context.Context, in *TrackToolUsageRequest) (*TrackToolUsageResponse, error)
}

type drpcAIBridgeDaemonClient struct {
	cc drpc.Conn
}

func NewDRPCAIBridgeDaemonClient(cc drpc.Conn) DRPCAIBridgeDaemonClient {
	return &drpcAIBridgeDaemonClient{cc}
}

func (c *drpcAIBridgeDaemonClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcAIBridgeDaemonClient) StartSession(ctx context.Context, in *StartSessionRequest) (*StartSessionResponse, error) {
	out := new(StartSessionResponse)
	err := c.cc.Invoke(ctx, "/aibridged.AIBridgeDaemon/StartSession", drpcEncoding_File_aibridged_proto_aibridged_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAIBridgeDaemonClient) TrackTokenUsage(ctx context.Context, in *TrackTokenUsageRequest) (*TrackTokenUsageResponse, error) {
	out := new(TrackTokenUsageResponse)
	err := c.cc.Invoke(ctx, "/aibridged.AIBridgeDaemon/TrackTokenUsage", drpcEncoding_File_aibridged_proto_aibridged_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAIBridgeDaemonClient) TrackUserPrompt(ctx context.Context, in *TrackUserPromptRequest) (*TrackUserPromptResponse, error) {
	out := new(TrackUserPromptResponse)
	err := c.cc.Invoke(ctx, "/aibridged.AIBridgeDaemon/TrackUserPrompt", drpcEncoding_File_aibridged_proto_aibridged_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAIBridgeDaemonClient) TrackToolUsage(ctx context.Context, in *TrackToolUsageRequest) (*TrackToolUsageResponse, error) {
	out := new(TrackToolUsageResponse)
	err := c.cc.Invoke(ctx, "/aibridged.AIBridgeDaemon/TrackToolUsage", drpcEncoding_File_aibridged_proto_aibridged_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCAIBridgeDaemonServer interface {
	StartSession(context.Context, *StartSessionRequest) (*StartSessionResponse, error)
	TrackTokenUsage(context.Context, *TrackTokenUsageRequest) (*TrackTokenUsageResponse, error)
	TrackUserPrompt(context.Context, *TrackUserPromptRequest) (*TrackUserPromptResponse, error)
	TrackToolUsage(context.Context, *TrackToolUsageRequest) (*TrackToolUsageResponse, error)
}

type DRPCAIBridgeDaemonUnimplementedServer struct{}

func (s *DRPCAIBridgeDaemonUnimplementedServer) StartSession(context.Context, *StartSessionRequest) (*StartSessionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAIBridgeDaemonUnimplementedServer) TrackTokenUsage(context.Context, *TrackTokenUsageRequest) (*TrackTokenUsageResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAIBridgeDaemonUnimplementedServer) TrackUserPrompt(context.Context, *TrackUserPromptRequest) (*TrackUserPromptResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAIBridgeDaemonUnimplementedServer) TrackToolUsage(context.Context, *TrackToolUsageRequest) (*TrackToolUsageResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCAIBridgeDaemonDescription struct{}

func (DRPCAIBridgeDaemonDescription) NumMethods() int { return 4 }

func (DRPCAIBridgeDaemonDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/aibridged.AIBridgeDaemon/StartSession", drpcEncoding_File_aibridged_proto_aibridged_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAIBridgeDaemonServer).
					StartSession(
						ctx,
						in1.(*StartSessionRequest),
					)
			}, DRPCAIBridgeDaemonServer.StartSession, true
	case 1:
		return "/aibridged.AIBridgeDaemon/TrackTokenUsage", drpcEncoding_File_aibridged_proto_aibridged_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAIBridgeDaemonServer).
					TrackTokenUsage(
						ctx,
						in1.(*TrackTokenUsageRequest),
					)
			}, DRPCAIBridgeDaemonServer.TrackTokenUsage, true
	case 2:
		return "/aibridged.AIBridgeDaemon/TrackUserPrompt", drpcEncoding_File_aibridged_proto_aibridged_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAIBridgeDaemonServer).
					TrackUserPrompt(
						ctx,
						in1.(*TrackUserPromptRequest),
					)
			}, DRPCAIBridgeDaemonServer.TrackUserPrompt, true
	case 3:
		return "/aibridged.AIBridgeDaemon/TrackToolUsage", drpcEncoding_File_aibridged_proto_aibridged_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAIBridgeDaemonServer).
					TrackToolUsage(
						ctx,
						in1.(*TrackToolUsageRequest),
					)
			}, DRPCAIBridgeDaemonServer.TrackToolUsage, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterAIBridgeDaemon(mux drpc.Mux, impl DRPCAIBridgeDaemonServer) error {
	return mux.Register(impl, DRPCAIBridgeDaemonDescription{})
}

type DRPCAIBridgeDaemon_StartSessionStream interface {
	drpc.Stream
	SendAndClose(*StartSessionResponse) error
}

type drpcAIBridgeDaemon_StartSessionStream struct {
	drpc.Stream
}

func (x *drpcAIBridgeDaemon_StartSessionStream) SendAndClose(m *StartSessionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_aibridged_proto_aibridged_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAIBridgeDaemon_TrackTokenUsageStream interface {
	drpc.Stream
	SendAndClose(*TrackTokenUsageResponse) error
}

type drpcAIBridgeDaemon_TrackTokenUsageStream struct {
	drpc.Stream
}

func (x *drpcAIBridgeDaemon_TrackTokenUsageStream) SendAndClose(m *TrackTokenUsageResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_aibridged_proto_aibridged_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAIBridgeDaemon_TrackUserPromptStream interface {
	drpc.Stream
	SendAndClose(*TrackUserPromptResponse) error
}

type drpcAIBridgeDaemon_TrackUserPromptStream struct {
	drpc.Stream
}

func (x *drpcAIBridgeDaemon_TrackUserPromptStream) SendAndClose(m *TrackUserPromptResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_aibridged_proto_aibridged_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAIBridgeDaemon_TrackToolUsageStream interface {
	drpc.Stream
	SendAndClose(*TrackToolUsageResponse) error
}

type drpcAIBridgeDaemon_TrackToolUsageStream struct {
	drpc.Stream
}

func (x *drpcAIBridgeDaemon_TrackToolUsageStream) SendAndClose(m *TrackToolUsageResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_aibridged_proto_aibridged_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
