// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.34
// source: aibridged/proto/aibridged.proto

package proto

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_aibridged_proto_aibridged_proto struct{}

func (drpcEncoding_File_aibridged_proto_aibridged_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_aibridged_proto_aibridged_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_aibridged_proto_aibridged_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_aibridged_proto_aibridged_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_aibridged_proto_aibridged_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCRecorderClient interface {
	DRPCConn() drpc.Conn

	RecordInterception(ctx context.Context, in *RecordInterceptionRequest) (*RecordInterceptionResponse, error)
	RecordTokenUsage(ctx context.Context, in *RecordTokenUsageRequest) (*RecordTokenUsageResponse, error)
	RecordPromptUsage(ctx context.Context, in *RecordPromptUsageRequest) (*RecordPromptUsageResponse, error)
	RecordToolUsage(ctx context.Context, in *RecordToolUsageRequest) (*RecordToolUsageResponse, error)
}

type drpcRecorderClient struct {
	cc drpc.Conn
}

func NewDRPCRecorderClient(cc drpc.Conn) DRPCRecorderClient {
	return &drpcRecorderClient{cc}
}

func (c *drpcRecorderClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcRecorderClient) RecordInterception(ctx context.Context, in *RecordInterceptionRequest) (*RecordInterceptionResponse, error) {
	out := new(RecordInterceptionResponse)
	err := c.cc.Invoke(ctx, "/proto.Recorder/RecordInterception", drpcEncoding_File_aibridged_proto_aibridged_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcRecorderClient) RecordTokenUsage(ctx context.Context, in *RecordTokenUsageRequest) (*RecordTokenUsageResponse, error) {
	out := new(RecordTokenUsageResponse)
	err := c.cc.Invoke(ctx, "/proto.Recorder/RecordTokenUsage", drpcEncoding_File_aibridged_proto_aibridged_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcRecorderClient) RecordPromptUsage(ctx context.Context, in *RecordPromptUsageRequest) (*RecordPromptUsageResponse, error) {
	out := new(RecordPromptUsageResponse)
	err := c.cc.Invoke(ctx, "/proto.Recorder/RecordPromptUsage", drpcEncoding_File_aibridged_proto_aibridged_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcRecorderClient) RecordToolUsage(ctx context.Context, in *RecordToolUsageRequest) (*RecordToolUsageResponse, error) {
	out := new(RecordToolUsageResponse)
	err := c.cc.Invoke(ctx, "/proto.Recorder/RecordToolUsage", drpcEncoding_File_aibridged_proto_aibridged_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCRecorderServer interface {
	RecordInterception(context.Context, *RecordInterceptionRequest) (*RecordInterceptionResponse, error)
	RecordTokenUsage(context.Context, *RecordTokenUsageRequest) (*RecordTokenUsageResponse, error)
	RecordPromptUsage(context.Context, *RecordPromptUsageRequest) (*RecordPromptUsageResponse, error)
	RecordToolUsage(context.Context, *RecordToolUsageRequest) (*RecordToolUsageResponse, error)
}

type DRPCRecorderUnimplementedServer struct{}

func (s *DRPCRecorderUnimplementedServer) RecordInterception(context.Context, *RecordInterceptionRequest) (*RecordInterceptionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCRecorderUnimplementedServer) RecordTokenUsage(context.Context, *RecordTokenUsageRequest) (*RecordTokenUsageResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCRecorderUnimplementedServer) RecordPromptUsage(context.Context, *RecordPromptUsageRequest) (*RecordPromptUsageResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCRecorderUnimplementedServer) RecordToolUsage(context.Context, *RecordToolUsageRequest) (*RecordToolUsageResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCRecorderDescription struct{}

func (DRPCRecorderDescription) NumMethods() int { return 4 }

func (DRPCRecorderDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/proto.Recorder/RecordInterception", drpcEncoding_File_aibridged_proto_aibridged_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCRecorderServer).
					RecordInterception(
						ctx,
						in1.(*RecordInterceptionRequest),
					)
			}, DRPCRecorderServer.RecordInterception, true
	case 1:
		return "/proto.Recorder/RecordTokenUsage", drpcEncoding_File_aibridged_proto_aibridged_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCRecorderServer).
					RecordTokenUsage(
						ctx,
						in1.(*RecordTokenUsageRequest),
					)
			}, DRPCRecorderServer.RecordTokenUsage, true
	case 2:
		return "/proto.Recorder/RecordPromptUsage", drpcEncoding_File_aibridged_proto_aibridged_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCRecorderServer).
					RecordPromptUsage(
						ctx,
						in1.(*RecordPromptUsageRequest),
					)
			}, DRPCRecorderServer.RecordPromptUsage, true
	case 3:
		return "/proto.Recorder/RecordToolUsage", drpcEncoding_File_aibridged_proto_aibridged_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCRecorderServer).
					RecordToolUsage(
						ctx,
						in1.(*RecordToolUsageRequest),
					)
			}, DRPCRecorderServer.RecordToolUsage, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterRecorder(mux drpc.Mux, impl DRPCRecorderServer) error {
	return mux.Register(impl, DRPCRecorderDescription{})
}

type DRPCRecorder_RecordInterceptionStream interface {
	drpc.Stream
	SendAndClose(*RecordInterceptionResponse) error
}

type drpcRecorder_RecordInterceptionStream struct {
	drpc.Stream
}

func (x *drpcRecorder_RecordInterceptionStream) SendAndClose(m *RecordInterceptionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_aibridged_proto_aibridged_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCRecorder_RecordTokenUsageStream interface {
	drpc.Stream
	SendAndClose(*RecordTokenUsageResponse) error
}

type drpcRecorder_RecordTokenUsageStream struct {
	drpc.Stream
}

func (x *drpcRecorder_RecordTokenUsageStream) SendAndClose(m *RecordTokenUsageResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_aibridged_proto_aibridged_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCRecorder_RecordPromptUsageStream interface {
	drpc.Stream
	SendAndClose(*RecordPromptUsageResponse) error
}

type drpcRecorder_RecordPromptUsageStream struct {
	drpc.Stream
}

func (x *drpcRecorder_RecordPromptUsageStream) SendAndClose(m *RecordPromptUsageResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_aibridged_proto_aibridged_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCRecorder_RecordToolUsageStream interface {
	drpc.Stream
	SendAndClose(*RecordToolUsageResponse) error
}

type drpcRecorder_RecordToolUsageStream struct {
	drpc.Stream
}

func (x *drpcRecorder_RecordToolUsageStream) SendAndClose(m *RecordToolUsageResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_aibridged_proto_aibridged_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMCPConfiguratorClient interface {
	DRPCConn() drpc.Conn

	RetrieveMCPServerConfigs(ctx context.Context, in *RetrieveMCPServerConfigsRequest) (*RetrieveMCPServerConfigsResponse, error)
}

type drpcMCPConfiguratorClient struct {
	cc drpc.Conn
}

func NewDRPCMCPConfiguratorClient(cc drpc.Conn) DRPCMCPConfiguratorClient {
	return &drpcMCPConfiguratorClient{cc}
}

func (c *drpcMCPConfiguratorClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcMCPConfiguratorClient) RetrieveMCPServerConfigs(ctx context.Context, in *RetrieveMCPServerConfigsRequest) (*RetrieveMCPServerConfigsResponse, error) {
	out := new(RetrieveMCPServerConfigsResponse)
	err := c.cc.Invoke(ctx, "/proto.MCPConfigurator/RetrieveMCPServerConfigs", drpcEncoding_File_aibridged_proto_aibridged_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCMCPConfiguratorServer interface {
	RetrieveMCPServerConfigs(context.Context, *RetrieveMCPServerConfigsRequest) (*RetrieveMCPServerConfigsResponse, error)
}

type DRPCMCPConfiguratorUnimplementedServer struct{}

func (s *DRPCMCPConfiguratorUnimplementedServer) RetrieveMCPServerConfigs(context.Context, *RetrieveMCPServerConfigsRequest) (*RetrieveMCPServerConfigsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCMCPConfiguratorDescription struct{}

func (DRPCMCPConfiguratorDescription) NumMethods() int { return 1 }

func (DRPCMCPConfiguratorDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/proto.MCPConfigurator/RetrieveMCPServerConfigs", drpcEncoding_File_aibridged_proto_aibridged_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMCPConfiguratorServer).
					RetrieveMCPServerConfigs(
						ctx,
						in1.(*RetrieveMCPServerConfigsRequest),
					)
			}, DRPCMCPConfiguratorServer.RetrieveMCPServerConfigs, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterMCPConfigurator(mux drpc.Mux, impl DRPCMCPConfiguratorServer) error {
	return mux.Register(impl, DRPCMCPConfiguratorDescription{})
}

type DRPCMCPConfigurator_RetrieveMCPServerConfigsStream interface {
	drpc.Stream
	SendAndClose(*RetrieveMCPServerConfigsResponse) error
}

type drpcMCPConfigurator_RetrieveMCPServerConfigsStream struct {
	drpc.Stream
}

func (x *drpcMCPConfigurator_RetrieveMCPServerConfigsStream) SendAndClose(m *RetrieveMCPServerConfigsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_aibridged_proto_aibridged_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
