// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.34
// source: aibridged/proto/aibridged.proto

package proto

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_aibridged_proto_aibridged_proto struct{}

func (drpcEncoding_File_aibridged_proto_aibridged_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_aibridged_proto_aibridged_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_aibridged_proto_aibridged_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_aibridged_proto_aibridged_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_aibridged_proto_aibridged_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCAIBridgeDaemonClient interface {
	DRPCConn() drpc.Conn

	AuditPrompt(ctx context.Context, in *AuditPromptRequest) (*AuditPromptResponse, error)
}

type drpcAIBridgeDaemonClient struct {
	cc drpc.Conn
}

func NewDRPCAIBridgeDaemonClient(cc drpc.Conn) DRPCAIBridgeDaemonClient {
	return &drpcAIBridgeDaemonClient{cc}
}

func (c *drpcAIBridgeDaemonClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcAIBridgeDaemonClient) AuditPrompt(ctx context.Context, in *AuditPromptRequest) (*AuditPromptResponse, error) {
	out := new(AuditPromptResponse)
	err := c.cc.Invoke(ctx, "/aibridged.AIBridgeDaemon/AuditPrompt", drpcEncoding_File_aibridged_proto_aibridged_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCAIBridgeDaemonServer interface {
	AuditPrompt(context.Context, *AuditPromptRequest) (*AuditPromptResponse, error)
}

type DRPCAIBridgeDaemonUnimplementedServer struct{}

func (s *DRPCAIBridgeDaemonUnimplementedServer) AuditPrompt(context.Context, *AuditPromptRequest) (*AuditPromptResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCAIBridgeDaemonDescription struct{}

func (DRPCAIBridgeDaemonDescription) NumMethods() int { return 1 }

func (DRPCAIBridgeDaemonDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/aibridged.AIBridgeDaemon/AuditPrompt", drpcEncoding_File_aibridged_proto_aibridged_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAIBridgeDaemonServer).
					AuditPrompt(
						ctx,
						in1.(*AuditPromptRequest),
					)
			}, DRPCAIBridgeDaemonServer.AuditPrompt, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterAIBridgeDaemon(mux drpc.Mux, impl DRPCAIBridgeDaemonServer) error {
	return mux.Register(impl, DRPCAIBridgeDaemonDescription{})
}

type DRPCAIBridgeDaemon_AuditPromptStream interface {
	drpc.Stream
	SendAndClose(*AuditPromptResponse) error
}

type drpcAIBridgeDaemon_AuditPromptStream struct {
	drpc.Stream
}

func (x *drpcAIBridgeDaemon_AuditPromptStream) SendAndClose(m *AuditPromptResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_aibridged_proto_aibridged_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCOpenAIServiceClient interface {
	DRPCConn() drpc.Conn

	ChatCompletions(ctx context.Context, in *JSONPayload) (DRPCOpenAIService_ChatCompletionsClient, error)
}

type drpcOpenAIServiceClient struct {
	cc drpc.Conn
}

func NewDRPCOpenAIServiceClient(cc drpc.Conn) DRPCOpenAIServiceClient {
	return &drpcOpenAIServiceClient{cc}
}

func (c *drpcOpenAIServiceClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcOpenAIServiceClient) ChatCompletions(ctx context.Context, in *JSONPayload) (DRPCOpenAIService_ChatCompletionsClient, error) {
	stream, err := c.cc.NewStream(ctx, "/aibridged.OpenAIService/ChatCompletions", drpcEncoding_File_aibridged_proto_aibridged_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcOpenAIService_ChatCompletionsClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_aibridged_proto_aibridged_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCOpenAIService_ChatCompletionsClient interface {
	drpc.Stream
	Recv() (*JSONPayload, error)
}

type drpcOpenAIService_ChatCompletionsClient struct {
	drpc.Stream
}

func (x *drpcOpenAIService_ChatCompletionsClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcOpenAIService_ChatCompletionsClient) Recv() (*JSONPayload, error) {
	m := new(JSONPayload)
	if err := x.MsgRecv(m, drpcEncoding_File_aibridged_proto_aibridged_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcOpenAIService_ChatCompletionsClient) RecvMsg(m *JSONPayload) error {
	return x.MsgRecv(m, drpcEncoding_File_aibridged_proto_aibridged_proto{})
}

type DRPCOpenAIServiceServer interface {
	ChatCompletions(*JSONPayload, DRPCOpenAIService_ChatCompletionsStream) error
}

type DRPCOpenAIServiceUnimplementedServer struct{}

func (s *DRPCOpenAIServiceUnimplementedServer) ChatCompletions(*JSONPayload, DRPCOpenAIService_ChatCompletionsStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCOpenAIServiceDescription struct{}

func (DRPCOpenAIServiceDescription) NumMethods() int { return 1 }

func (DRPCOpenAIServiceDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/aibridged.OpenAIService/ChatCompletions", drpcEncoding_File_aibridged_proto_aibridged_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCOpenAIServiceServer).
					ChatCompletions(
						in1.(*JSONPayload),
						&drpcOpenAIService_ChatCompletionsStream{in2.(drpc.Stream)},
					)
			}, DRPCOpenAIServiceServer.ChatCompletions, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterOpenAIService(mux drpc.Mux, impl DRPCOpenAIServiceServer) error {
	return mux.Register(impl, DRPCOpenAIServiceDescription{})
}

type DRPCOpenAIService_ChatCompletionsStream interface {
	drpc.Stream
	Send(*JSONPayload) error
}

type drpcOpenAIService_ChatCompletionsStream struct {
	drpc.Stream
}

func (x *drpcOpenAIService_ChatCompletionsStream) Send(m *JSONPayload) error {
	return x.MsgSend(m, drpcEncoding_File_aibridged_proto_aibridged_proto{})
}

type DRPCAnthropicServiceClient interface {
	DRPCConn() drpc.Conn

	Messages(ctx context.Context, in *JSONPayload) (DRPCAnthropicService_MessagesClient, error)
}

type drpcAnthropicServiceClient struct {
	cc drpc.Conn
}

func NewDRPCAnthropicServiceClient(cc drpc.Conn) DRPCAnthropicServiceClient {
	return &drpcAnthropicServiceClient{cc}
}

func (c *drpcAnthropicServiceClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcAnthropicServiceClient) Messages(ctx context.Context, in *JSONPayload) (DRPCAnthropicService_MessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, "/aibridged.AnthropicService/Messages", drpcEncoding_File_aibridged_proto_aibridged_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcAnthropicService_MessagesClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_aibridged_proto_aibridged_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCAnthropicService_MessagesClient interface {
	drpc.Stream
	Recv() (*JSONPayload, error)
}

type drpcAnthropicService_MessagesClient struct {
	drpc.Stream
}

func (x *drpcAnthropicService_MessagesClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAnthropicService_MessagesClient) Recv() (*JSONPayload, error) {
	m := new(JSONPayload)
	if err := x.MsgRecv(m, drpcEncoding_File_aibridged_proto_aibridged_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcAnthropicService_MessagesClient) RecvMsg(m *JSONPayload) error {
	return x.MsgRecv(m, drpcEncoding_File_aibridged_proto_aibridged_proto{})
}

type DRPCAnthropicServiceServer interface {
	Messages(*JSONPayload, DRPCAnthropicService_MessagesStream) error
}

type DRPCAnthropicServiceUnimplementedServer struct{}

func (s *DRPCAnthropicServiceUnimplementedServer) Messages(*JSONPayload, DRPCAnthropicService_MessagesStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCAnthropicServiceDescription struct{}

func (DRPCAnthropicServiceDescription) NumMethods() int { return 1 }

func (DRPCAnthropicServiceDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/aibridged.AnthropicService/Messages", drpcEncoding_File_aibridged_proto_aibridged_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCAnthropicServiceServer).
					Messages(
						in1.(*JSONPayload),
						&drpcAnthropicService_MessagesStream{in2.(drpc.Stream)},
					)
			}, DRPCAnthropicServiceServer.Messages, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterAnthropicService(mux drpc.Mux, impl DRPCAnthropicServiceServer) error {
	return mux.Register(impl, DRPCAnthropicServiceDescription{})
}

type DRPCAnthropicService_MessagesStream interface {
	drpc.Stream
	Send(*JSONPayload) error
}

type drpcAnthropicService_MessagesStream struct {
	drpc.Stream
}

func (x *drpcAnthropicService_MessagesStream) Send(m *JSONPayload) error {
	return x.MsgSend(m, drpcEncoding_File_aibridged_proto_aibridged_proto{})
}
