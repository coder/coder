import "@xterm/xterm/css/xterm.css";
import {
	workspaceByOwnerAndName,
	workspaceUsage,
} from "api/queries/workspaces";
import { Terminal } from "components/Terminal/Terminal";
import type { ConnectionStatus } from "components/Terminal/types";
import { ThemeOverride } from "contexts/ThemeProvider";
import { type FC, useEffect, useState } from "react";
import { useQuery } from "react-query";
import { useNavigate, useParams, useSearchParams } from "react-router";
import themes from "theme";
import { pageTitle } from "utils/page";
import { getMatchingAgentOrFirst } from "utils/workspace";
import { v4 as uuidv4 } from "uuid";
import { TerminalAlerts } from "./TerminalAlerts";

const TerminalPage: FC = () => {
	const theme = themes.dark;
	const navigate = useNavigate();
	const params = useParams() as { username: string; workspace: string };
	const username = params.username.replace("@", "");
	const [searchParams] = useSearchParams();
	const isDebugging = searchParams.has("debug");
	// The reconnection token is a unique token that identifies
	// a terminal session. It's generated by the client to reduce
	// a round-trip, and must be a UUIDv4.
	const reconnectionToken = searchParams.get("reconnect") ?? uuidv4();
	const command = searchParams.get("command") || undefined;
	const containerName = searchParams.get("container") || undefined;
	const containerUser = searchParams.get("container_user") || undefined;
	// The workspace name is in the format:
	// <workspace name>[.<agent name>]
	const workspaceNameParts = params.workspace?.split(".");
	const workspace = useQuery(
		workspaceByOwnerAndName(username, workspaceNameParts?.[0]),
	);
	const workspaceAgent = workspace.data
		? getMatchingAgentOrFirst(workspace.data, workspaceNameParts?.[1])
		: undefined;

	const [connectionStatus, setConnectionStatus] =
		useState<ConnectionStatus>("initializing");

	// Periodically report workspace usage.
	useQuery(
		workspaceUsage({
			usageApp: "reconnecting-pty",
			connectionStatus,
			workspaceId: workspace.data?.id,
			agentId: workspaceAgent?.id,
		}),
	);

	// Updates the reconnection token into the URL if necessary.
	useEffect(() => {
		if (searchParams.get("reconnect") === reconnectionToken) {
			return;
		}
		searchParams.set("reconnect", reconnectionToken);
		navigate(
			{
				search: searchParams.toString(),
			},
			{
				replace: true,
			},
		);
	}, [navigate, reconnectionToken, searchParams]);

	return (
		<ThemeOverride theme={theme}>
			{workspace.data && (
				<title>
					{pageTitle(
						"Terminal",
						`${workspace.data.owner_name}/${workspace.data.name}`,
					)}
				</title>
			)}

			<div
				css={{ display: "flex", flexDirection: "column", height: "100vh" }}
				data-status={connectionStatus}
			>
				<TerminalAlerts
					agent={workspaceAgent}
					status={connectionStatus}
					onAlertChange={() => {
						// Terminal component handles its own resizing
					}}
				/>
				{workspaceAgent && (
					<Terminal
						agentId={workspaceAgent.id}
						agentName={workspaceAgent.name}
						agentOS={workspaceAgent.operating_system}
						workspaceName={workspace.data?.name || ""}
						username={username}
						reconnectionToken={reconnectionToken}
						command={command}
						containerName={containerName}
						containerUser={containerUser}
						onConnectionStatus={setConnectionStatus}
						className="flex-1"
					/>
				)}
			</div>

			{isDebugging && (
				<span
					css={{
						position: "absolute",
						bottom: 24,
						right: 24,
						color: theme.palette.text.disabled,
						fontSize: 14,
					}}
				>
					Debug mode enabled
				</span>
			)}
		</ThemeOverride>
	);
};

export default TerminalPage;
