// Code generated by MockGen. DO NOT EDIT.
// Source: .. (interfaces: AgentConn)
//
// Generated by this command:
//
//	mockgen -destination ./agentconnmock.go -package agentconnmock .. AgentConn
//

// Package agentconnmock is a generated GoMock package.
package agentconnmock

import (
	context "context"
	io "io"
	net "net"
	reflect "reflect"
	time "time"

	slog "cdr.dev/slog"
	codersdk "github.com/coder/coder/v2/codersdk"
	healthsdk "github.com/coder/coder/v2/codersdk/healthsdk"
	workspacesdk "github.com/coder/coder/v2/codersdk/workspacesdk"
	tailnet "github.com/coder/coder/v2/tailnet"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	ssh "golang.org/x/crypto/ssh"
	gonet "gvisor.dev/gvisor/pkg/tcpip/adapters/gonet"
	ipnstate "tailscale.com/ipn/ipnstate"
	speedtest "tailscale.com/net/speedtest"
)

// MockAgentConn is a mock of AgentConn interface.
type MockAgentConn struct {
	ctrl     *gomock.Controller
	recorder *MockAgentConnMockRecorder
	isgomock struct{}
}

// MockAgentConnMockRecorder is the mock recorder for MockAgentConn.
type MockAgentConnMockRecorder struct {
	mock *MockAgentConn
}

// NewMockAgentConn creates a new mock instance.
func NewMockAgentConn(ctrl *gomock.Controller) *MockAgentConn {
	mock := &MockAgentConn{ctrl: ctrl}
	mock.recorder = &MockAgentConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentConn) EXPECT() *MockAgentConnMockRecorder {
	return m.recorder
}

// AwaitReachable mocks base method.
func (m *MockAgentConn) AwaitReachable(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AwaitReachable", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AwaitReachable indicates an expected call of AwaitReachable.
func (mr *MockAgentConnMockRecorder) AwaitReachable(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AwaitReachable", reflect.TypeOf((*MockAgentConn)(nil).AwaitReachable), ctx)
}

// Close mocks base method.
func (m *MockAgentConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAgentConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAgentConn)(nil).Close))
}

// DebugLogs mocks base method.
func (m *MockAgentConn) DebugLogs(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugLogs", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebugLogs indicates an expected call of DebugLogs.
func (mr *MockAgentConnMockRecorder) DebugLogs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugLogs", reflect.TypeOf((*MockAgentConn)(nil).DebugLogs), ctx)
}

// DebugMagicsock mocks base method.
func (m *MockAgentConn) DebugMagicsock(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugMagicsock", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebugMagicsock indicates an expected call of DebugMagicsock.
func (mr *MockAgentConnMockRecorder) DebugMagicsock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugMagicsock", reflect.TypeOf((*MockAgentConn)(nil).DebugMagicsock), ctx)
}

// DebugManifest mocks base method.
func (m *MockAgentConn) DebugManifest(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugManifest", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebugManifest indicates an expected call of DebugManifest.
func (mr *MockAgentConnMockRecorder) DebugManifest(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugManifest", reflect.TypeOf((*MockAgentConn)(nil).DebugManifest), ctx)
}

// DialContext mocks base method.
func (m *MockAgentConn) DialContext(ctx context.Context, network, addr string) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialContext", ctx, network, addr)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialContext indicates an expected call of DialContext.
func (mr *MockAgentConnMockRecorder) DialContext(ctx, network, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialContext", reflect.TypeOf((*MockAgentConn)(nil).DialContext), ctx, network, addr)
}

// GetPeerDiagnostics mocks base method.
func (m *MockAgentConn) GetPeerDiagnostics() tailnet.PeerDiagnostics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerDiagnostics")
	ret0, _ := ret[0].(tailnet.PeerDiagnostics)
	return ret0
}

// GetPeerDiagnostics indicates an expected call of GetPeerDiagnostics.
func (mr *MockAgentConnMockRecorder) GetPeerDiagnostics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerDiagnostics", reflect.TypeOf((*MockAgentConn)(nil).GetPeerDiagnostics))
}

// ListContainers mocks base method.
func (m *MockAgentConn) ListContainers(ctx context.Context) (codersdk.WorkspaceAgentListContainersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContainers", ctx)
	ret0, _ := ret[0].(codersdk.WorkspaceAgentListContainersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContainers indicates an expected call of ListContainers.
func (mr *MockAgentConnMockRecorder) ListContainers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContainers", reflect.TypeOf((*MockAgentConn)(nil).ListContainers), ctx)
}

// ListeningPorts mocks base method.
func (m *MockAgentConn) ListeningPorts(ctx context.Context) (codersdk.WorkspaceAgentListeningPortsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListeningPorts", ctx)
	ret0, _ := ret[0].(codersdk.WorkspaceAgentListeningPortsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListeningPorts indicates an expected call of ListeningPorts.
func (mr *MockAgentConnMockRecorder) ListeningPorts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListeningPorts", reflect.TypeOf((*MockAgentConn)(nil).ListeningPorts), ctx)
}

// Netcheck mocks base method.
func (m *MockAgentConn) Netcheck(ctx context.Context) (healthsdk.AgentNetcheckReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Netcheck", ctx)
	ret0, _ := ret[0].(healthsdk.AgentNetcheckReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Netcheck indicates an expected call of Netcheck.
func (mr *MockAgentConnMockRecorder) Netcheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Netcheck", reflect.TypeOf((*MockAgentConn)(nil).Netcheck), ctx)
}

// Ping mocks base method.
func (m *MockAgentConn) Ping(ctx context.Context) (time.Duration, bool, *ipnstate.PingResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(*ipnstate.PingResult)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Ping indicates an expected call of Ping.
func (mr *MockAgentConnMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAgentConn)(nil).Ping), ctx)
}

// PrometheusMetrics mocks base method.
func (m *MockAgentConn) PrometheusMetrics(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrometheusMetrics", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrometheusMetrics indicates an expected call of PrometheusMetrics.
func (mr *MockAgentConnMockRecorder) PrometheusMetrics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrometheusMetrics", reflect.TypeOf((*MockAgentConn)(nil).PrometheusMetrics), ctx)
}

// ReconnectingPTY mocks base method.
func (m *MockAgentConn) ReconnectingPTY(ctx context.Context, id uuid.UUID, height, width uint16, command string, initOpts ...workspacesdk.AgentReconnectingPTYInitOption) (net.Conn, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, height, width, command}
	for _, a := range initOpts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReconnectingPTY", varargs...)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconnectingPTY indicates an expected call of ReconnectingPTY.
func (mr *MockAgentConnMockRecorder) ReconnectingPTY(ctx, id, height, width, command any, initOpts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, height, width, command}, initOpts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconnectingPTY", reflect.TypeOf((*MockAgentConn)(nil).ReconnectingPTY), varargs...)
}

// RecreateDevcontainer mocks base method.
func (m *MockAgentConn) RecreateDevcontainer(ctx context.Context, devcontainerID string) (codersdk.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecreateDevcontainer", ctx, devcontainerID)
	ret0, _ := ret[0].(codersdk.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecreateDevcontainer indicates an expected call of RecreateDevcontainer.
func (mr *MockAgentConnMockRecorder) RecreateDevcontainer(ctx, devcontainerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecreateDevcontainer", reflect.TypeOf((*MockAgentConn)(nil).RecreateDevcontainer), ctx, devcontainerID)
}

// SSH mocks base method.
func (m *MockAgentConn) SSH(ctx context.Context) (*gonet.TCPConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSH", ctx)
	ret0, _ := ret[0].(*gonet.TCPConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSH indicates an expected call of SSH.
func (mr *MockAgentConnMockRecorder) SSH(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSH", reflect.TypeOf((*MockAgentConn)(nil).SSH), ctx)
}

// SSHClient mocks base method.
func (m *MockAgentConn) SSHClient(ctx context.Context) (*ssh.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHClient", ctx)
	ret0, _ := ret[0].(*ssh.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSHClient indicates an expected call of SSHClient.
func (mr *MockAgentConnMockRecorder) SSHClient(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHClient", reflect.TypeOf((*MockAgentConn)(nil).SSHClient), ctx)
}

// SSHClientOnPort mocks base method.
func (m *MockAgentConn) SSHClientOnPort(ctx context.Context, port uint16) (*ssh.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHClientOnPort", ctx, port)
	ret0, _ := ret[0].(*ssh.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSHClientOnPort indicates an expected call of SSHClientOnPort.
func (mr *MockAgentConnMockRecorder) SSHClientOnPort(ctx, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHClientOnPort", reflect.TypeOf((*MockAgentConn)(nil).SSHClientOnPort), ctx, port)
}

// SSHOnPort mocks base method.
func (m *MockAgentConn) SSHOnPort(ctx context.Context, port uint16) (*gonet.TCPConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHOnPort", ctx, port)
	ret0, _ := ret[0].(*gonet.TCPConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSHOnPort indicates an expected call of SSHOnPort.
func (mr *MockAgentConnMockRecorder) SSHOnPort(ctx, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHOnPort", reflect.TypeOf((*MockAgentConn)(nil).SSHOnPort), ctx, port)
}

// Speedtest mocks base method.
func (m *MockAgentConn) Speedtest(ctx context.Context, direction speedtest.Direction, duration time.Duration) ([]speedtest.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Speedtest", ctx, direction, duration)
	ret0, _ := ret[0].([]speedtest.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Speedtest indicates an expected call of Speedtest.
func (mr *MockAgentConnMockRecorder) Speedtest(ctx, direction, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Speedtest", reflect.TypeOf((*MockAgentConn)(nil).Speedtest), ctx, direction, duration)
}

// TailnetConn mocks base method.
func (m *MockAgentConn) TailnetConn() *tailnet.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TailnetConn")
	ret0, _ := ret[0].(*tailnet.Conn)
	return ret0
}

// TailnetConn indicates an expected call of TailnetConn.
func (mr *MockAgentConnMockRecorder) TailnetConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TailnetConn", reflect.TypeOf((*MockAgentConn)(nil).TailnetConn))
}

// WatchContainers mocks base method.
func (m *MockAgentConn) WatchContainers(ctx context.Context, logger slog.Logger) (<-chan codersdk.WorkspaceAgentListContainersResponse, io.Closer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchContainers", ctx, logger)
	ret0, _ := ret[0].(<-chan codersdk.WorkspaceAgentListContainersResponse)
	ret1, _ := ret[1].(io.Closer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WatchContainers indicates an expected call of WatchContainers.
func (mr *MockAgentConnMockRecorder) WatchContainers(ctx, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchContainers", reflect.TypeOf((*MockAgentConn)(nil).WatchContainers), ctx, logger)
}
